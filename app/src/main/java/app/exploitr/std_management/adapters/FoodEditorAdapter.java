package app.exploitr.std_management.adapters;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.SwitchCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;

import app.exploitr.std_management.io.FirebaseEditor;
import app.exploitr.storetodoor.Objects.FoodObject;
import app.exploitr.storetodoor.R;

public class FoodEditorAdapter extends RecyclerView.Adapter<FoodEditorAdapter.FoodsModelHolder> implements AlertDialogueHandler {

	ArrayList<FoodObject> mData;
	FragmentActivity context;

	String main_food, sub_food;
	AlertDialog local_dialogue;

	public FoodEditorAdapter(ArrayList<FoodObject> data, String main, String sub, FragmentActivity activity) {
		mData = data;
		context = activity;

		main_food = main;
		sub_food = sub;
	}

	@NonNull
	@Override
	public FoodEditorAdapter.FoodsModelHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
		return new FoodEditorAdapter.FoodsModelHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_admin_food_list_all, parent, false));
	}

	@Override
	public void onBindViewHolder(@NonNull FoodEditorAdapter.FoodsModelHolder holder, int position_invalid) {
		int position = holder.getAdapterPosition();
		holder.min_quantity.setText(String.valueOf(mData.get(position).getMinOrder()));
		holder.food_desc.setText(mData.get(position).getFoodDesc());
		holder.food_name.setText(mData.get(position).getMajorFood());
		holder.special_switch.setChecked(mData.get(position).isSpecial());
		holder.singleOrderable.setChecked(mData.get(position).isSingleOrderable());
		holder.outOfStock.setChecked(mData.get(position).isOutOfStock());

		holder.add_stores.setOnClickListener(v -> {
			View view = context.getLayoutInflater().inflate(R.layout.recycler_admin_store_list_create, null);

			EditText store_name = view.findViewById(R.id.store_name_admin_edit);
			EditText price_val = view.findViewById(R.id.store_price_admin_edit);

			local_dialogue = new AlertDialog.Builder(context)
					.setView(view)
					.setPositiveButton("Add", (dialog, which) -> FirebaseEditor.addStore(context.getApplicationContext(),
							main_food, sub_food,
							false, //todo highlight Special mode config
							mData.get(position).getMajorFood(),
							store_name.getText().toString(),
							Long.parseLong(price_val.getText().toString()),
							() -> {
								if (dialog != null)
									dialog.dismiss();

								notifyDataSetChanged();
								notifyItemChanged(position);
							})).setNegativeButton("Cancel", null)
					.create();

			if (!context.isFinishing())
				local_dialogue.show();
		});

		holder.save_food_details.setOnClickListener(v -> FirebaseEditor.addOrUpdateFoodDetails(context, main_food, sub_food,
				holder.food_name.getText().toString(),
				holder.food_desc.getText().toString(),
				false, //todo highlight -> holder.special_switch.isChecked()
				holder.singleOrderable.isChecked(),
				Long.parseLong(holder.min_quantity.getText().toString()),
				mData.get(position).getItem_id(),
				holder.outOfStock.isChecked(),
				new FirebaseEditor.FoodEditListener() {
					@Override
					public void onAddUpdateFood() {
						notifyItemChanged(position);
					}

					@Override
					public void onDelFood() {
						//ignored
					}
				}));

		holder.del_food_details.setOnClickListener(v -> FirebaseEditor.deleteFoodDetails(context.getApplicationContext(),
				main_food, sub_food, mData.get(position).getMajorFood(),
				mData.get(position).isSpecial(), new FirebaseEditor.FoodEditListener() {
					@Override
					public void onAddUpdateFood() {
						//ignored
					}

					@Override
					public void onDelFood() {
						notifyItemRemoved(position);
					}
				}));

		//total mess lol
		StoreListAdapter adapter = new StoreListAdapter(mData.get(position).getPrices(), (lookupStore, parentPos) ->
				FirebaseEditor.delStore(context.getApplicationContext(), main_food, sub_food,
						mData.get(position).isSpecial(), mData.get(position).getMajorFood(),
						mData.get(position).getPrices().get(parentPos).getStore(),
						() -> {
							this.notifyDataSetChanged();
							this.notifyItemChanged(parentPos);
							this.notifyItemRemoved(parentPos);
						}));

		holder.store_list.setAdapter(adapter);
		holder.store_list.setLayoutManager(new LinearLayoutManager(context));
		adapter.notifyDataSetChanged();
	}

	@Override
	public int getItemCount() {
		return mData.size();
	}

	@Override
	public void onStop() {
		if (local_dialogue != null && local_dialogue.isShowing())
			local_dialogue.dismiss();
	}

	static class FoodsModelHolder extends RecyclerView.ViewHolder {
		TextView min_quantity, food_desc, food_name;
		SwitchCompat special_switch, singleOrderable, outOfStock;
		Button add_stores, save_food_details, del_food_details;
		RecyclerView store_list;

		public FoodsModelHolder(@NonNull View itemView) {
			super(itemView);
			min_quantity = itemView.findViewById(R.id.min_quantity);
			food_desc = itemView.findViewById(R.id.food_desc);
			food_name = itemView.findViewById(R.id.food_name);

			special_switch = itemView.findViewById(R.id.special_switch);
			singleOrderable = itemView.findViewById(R.id.singleOrderable);

			add_stores = itemView.findViewById(R.id.add_stores);
			save_food_details = itemView.findViewById(R.id.save_food_details);
			del_food_details = itemView.findViewById(R.id.del_food_details);
			outOfStock = itemView.findViewById(R.id.out_of_stock);

			store_list = itemView.findViewById(R.id.store_list);
			store_list.setHasFixedSize(true);
		}
	}

}

interface AlertDialogueHandler {
	void onStop();
}

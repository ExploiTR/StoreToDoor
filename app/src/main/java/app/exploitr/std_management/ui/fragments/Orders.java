package app.exploitr.std_management.ui.fragments;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.util.Base64;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.widget.SearchView;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.common.base.Splitter;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.nex3z.togglebuttongroup.SingleSelectToggleGroup;

import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import app.exploitr.std_management.adapters.OrderViewAdapter;
import app.exploitr.std_management.io.OrderConfigurator;
import app.exploitr.storetodoor.Objects.OrderObject;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;


public class Orders extends Fragment {

	Set<OrderObject> orders_ordered_only = new HashSet<>();
	Set<OrderObject> orders_selected_only = new HashSet<>();

	OrderViewAdapter orderViewAdapter;
	OrderViewAdapter orderViewSelectedAdapter;

	long total_orders = 0L;
	boolean should_add;

	RecyclerView order_list_admin, order_search_list_admin;
	SearchView order_search_admin;
	SingleSelectToggleGroup choices_mode, choices_type;
	TextView collapse_main_list;

	boolean visible = true;
	boolean loaded = false;

	public Orders() {
		// Required empty public constructor
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
							 Bundle savedInstanceState) {

		View core = inflater.inflate(R.layout.manage_fragment_orders, container, false);

		order_list_admin = core.findViewById(R.id.order_list_admin);
		order_search_list_admin = core.findViewById(R.id.order_search_list_admin);
		order_search_admin = core.findViewById(R.id.order_search_admin);
		choices_type = core.findViewById(R.id.choices_type);
		choices_mode = core.findViewById(R.id.choices_mode);
		collapse_main_list = core.findViewById(R.id.collapse_main_list);

		orderViewAdapter = new OrderViewAdapter(orders_ordered_only, (pos, data, mode) -> {
			OrderConfigurator.updateOrderStatus(getContext(), data.getUserUid(), data.getReg_token(), String.valueOf(data.getTime()), mode);
			launchConfirmMessage(data);
		});

		orderViewSelectedAdapter = new OrderViewAdapter(orders_ordered_only, (pos, data, mode) -> {
			OrderConfigurator.updateOrderStatus(getContext(), data.getUserUid(), data.getReg_token(), String.valueOf(data.getTime()), mode);
			launchConfirmMessage(data);
		});

		order_list_admin.setAdapter(orderViewAdapter);
		order_search_list_admin.setAdapter(orderViewSelectedAdapter);

		order_list_admin.setLayoutManager(new LinearLayoutManager(getActivity()));
		order_search_list_admin.setLayoutManager(new LinearLayoutManager(getActivity()));

		collapse_main_list.setOnClickListener(v -> {
			order_list_admin.setVisibility(visible ? View.GONE : View.VISIBLE);
			visible = !visible;
			if (visible && !loaded) { //don't load twice
				loaded = true;
				processStuff();
			}
		});

		order_search_admin.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				processSearch();
				return false;
			}

			@SuppressLint("NotifyDataSetChanged")
			@Override
			public boolean onQueryTextChange(String newText) {
				if (newText.equalsIgnoreCase("")) {
					orders_selected_only.clear();
					orderViewSelectedAdapter.notifyDataSetChanged();
				}
				return false;
			}
		});

		return core;
	}

	private void launchConfirmMessage(OrderObject data) {
		String[] lat_long = data.getAddress().split(";")[0].split(",");

		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(data.getTime());
		SimpleDateFormat format = new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss", Locale.getDefault());
		format.setCalendar(calendar);

		StringBuilder foods = new StringBuilder();
		for (OrderObject.ItemOrder order : data.getFoods()) {
			foods.append(order.item).append(" - ").append(order.count).append(" plates\n");
		}

		String text = "*Total Charge : â‚¹" + (data.getTotal_price() + data.getDelivery_charge()) + "*\n\nDelivery time : "
				+ format.format(data.getDelivery_time()) + "\n\n" + "\n\nPhone Number : " + data.getPhone_number()
				+ "\n\n" + "Foods : " + foods.toString() + "\n\n"
				+ "Order address : " + data.getAddress() + "( http://maps.google.com/maps?saddr=" + lat_long[0] + "," + lat_long[1] + " )";

		Intent sendIntent = new Intent(Intent.ACTION_SEND);
		sendIntent.setType("text/plain");
		sendIntent.putExtra(Intent.EXTRA_TEXT, text);
		sendIntent.setPackage("com.whatsapp");

	/*	Sync.sendMessage(getContext(),
				data.getReg_token(), todo highlight
				"Order Confirmation", "Your order is confirmed!", null,);*/

		startActivity(sendIntent);
	}

	@SuppressLint("NotifyDataSetChanged")
	private void processStuff() {
		CollectionReference reference = DatabaseConstants.getFDB()
				.collection(DatabaseConstants.MAIN_ORDERS);
		reference.get().addOnSuccessListener(qux -> {
			for (DocumentSnapshot reference_ : qux.getDocuments()) {
				System.out.println(reference_.getId());
				reference_.getReference()
						.collection(DatabaseConstants.ORDER_DATA_ACCESS_STRING)
						.get().addOnSuccessListener(qDS -> {
					if (qDS.getDocuments().size() != 0) {
						for (DocumentSnapshot snapshot : qDS.getDocuments()) {
							DocumentReference refer_foods = snapshot.getReference();

							should_add = false;

							OrderObject order = new OrderObject();

							order.setTime(Long.parseLong(refer_foods.getId()));

							//todo filter duplicates

							ArrayList<OrderObject.ItemOrder> items = new ArrayList<>();

							refer_foods.get().addOnSuccessListener(document -> {
								if (document.exists()) {
									Map<String, Object> map = document.getData();
									if (map != null) {
										for (Map.Entry<String, Object> entry : map.entrySet()) {
											if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_ADDRESS)) {
												order.setAddress(new String(Base64.decode(String.valueOf(entry.getValue()), Base64.NO_PADDING),
														StandardCharsets.UTF_8));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_STATE)) {

												should_add = ((long) entry.getValue()) == DatabaseConstants.ORDER_STATE_ORDERED;

												order.setOrder_state((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.DELIVERY_CHARGE)) {
												order.setDelivery_charge((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_PHONE_NUMBER)) {
												order.setPhone_number(String.valueOf(entry.getValue()));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.PAYMENT_MODE)) {
												order.setPayment_mode((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.USER_UID)) {
												order.setUserUid((String) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.DELIVERY_TIME)) {
												order.setDelivery_time((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.REG_TOKEN)) {
												order.setReg_token((String) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.TOTAL_PRICE)) {
												order.setTotal_price((Long) entry.getValue());
												total_orders += (long) entry.getValue();
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_DATA)) {
												String food = new String(Base64.decode(String.valueOf(entry.getValue()), Base64.NO_PADDING),
														StandardCharsets.UTF_8);
												food = food.replace("{", "").replace("}", "");
												Map<String, String> map_foods = Splitter.on(',')
														.withKeyValueSeparator('=')
														.split(food);
												for (Map.Entry<String, String> entry_new : map_foods.entrySet()) {
													items.add(new OrderObject.ItemOrder(entry_new.getKey(), Long.parseLong(entry_new.getValue())));
												}
											} else {
												System.out.println(entry.getKey() + " : " + entry.getValue());
											}
										}
									}
									order.setFoods(items);
								}

								if (should_add) {
									orders_ordered_only.add(order);
									if (orderViewAdapter != null)
										orderViewAdapter.notifyDataSetChanged();
								}
							});
						}
					}
				});
			}
		});
	}

	@SuppressLint("NotifyDataSetChanged")
	private void processSearch() {
		Toast.makeText(getActivity(), "Searching....", Toast.LENGTH_SHORT).show();
		CollectionReference ref = DatabaseConstants.getFDB().collection(DatabaseConstants.MAIN_ORDERS);
		ref.get().addOnSuccessListener(queryDocumentSnapshots -> {
			for (DocumentSnapshot snapshot_main : queryDocumentSnapshots.getDocuments()) {
				ref.document(snapshot_main.getId())
						.collection(DatabaseConstants.ORDER_DATA_ACCESS_STRING)
						.get().addOnSuccessListener(qDS -> {
					if (qDS.getDocuments().size() != 0) {
						for (DocumentSnapshot snapshot : qDS.getDocuments()) {
							DocumentReference refer_foods = snapshot.getReference();

							should_add = false;

							OrderObject order = new OrderObject();

							order.setTime(Long.parseLong(refer_foods.getId()));
							System.out.println("IDDDDD >> " + snapshot.getId());

							ArrayList<OrderObject.ItemOrder> items = new ArrayList<>();

							refer_foods.get().addOnSuccessListener(document -> {
								if (document.exists()) {
									Map<String, Object> map = document.getData();
									if (map != null) {
										for (Map.Entry<String, Object> entry : map.entrySet()) {
											if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_NUMBER)) {
												if (!getOrderMode())
													should_add = order_search_admin.getQuery().toString().trim()
															.equalsIgnoreCase(String.valueOf(entry.getValue()));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_ADDRESS)) {
												order.setAddress(new String(Base64.decode(String.valueOf(entry.getValue()), Base64.NO_PADDING),
														StandardCharsets.UTF_8));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.DELIVERY_CHARGE)) {
												order.setDelivery_charge((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_PHONE_NUMBER)) {
												if (getOrderMode()) {
													should_add = order_search_admin.getQuery().toString().replace("+91", "").trim()
															.equalsIgnoreCase(String.valueOf(entry.getValue()).replace("+91", ""));
												}
												order.setPhone_number(String.valueOf(entry.getValue()));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.PAYMENT_MODE)) {
												order.setPayment_mode((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.REG_TOKEN)) {
												order.setReg_token((String) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.USER_UID)) {
												order.setReg_token((String) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.DELIVERY_TIME)) {
												order.setDelivery_time((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.TOTAL_PRICE)) {
												order.setTotal_price((Long) entry.getValue());
												total_orders += (long) entry.getValue();
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_STATE)) {
												should_add = ((long) entry.getValue()) == getOrderStateType();
												//highlight state verification at last
												order.setOrder_state((Long) entry.getValue());
												System.out.println("STATE ADD MODE : " + getOrderStateType() + " : " + entry.getValue() + " >> " + should_add);
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_DATA)) {
												String food = new String(Base64.decode(String.valueOf(entry.getValue()), Base64.NO_PADDING),
														StandardCharsets.UTF_8);
												food = food.replace("{", "").replace("}", "");
												Map<String, String> map_foods = Splitter.on(',')
														.withKeyValueSeparator('=')
														.split(food);
												for (Map.Entry<String, String> entry_new : map_foods.entrySet()) {
													items.add(new OrderObject.ItemOrder(entry_new.getKey(), Long.parseLong(entry_new.getValue())));
												}
											} else {
												String ex = String.valueOf(entry.getValue());
												System.out.println(entry.getKey() + " : " + ex.substring(0, Math.min(30, ex.length())));
											}
										}
										order.setFoods(items);

										if (should_add) {
											orders_selected_only.add(order);
											if (orderViewSelectedAdapter != null)
												orderViewSelectedAdapter.notifyDataSetChanged();
										}
									}
								}
							});
						}
					}
				});
			}
		});
	}

	int getOrderStateType() {
		if (choices_type.getCheckedId() == R.id.choice_0)
			return DatabaseConstants.ORDER_STATE_ORDERED;
		else if (choices_type.getCheckedId() == R.id.choice_1)
			return DatabaseConstants.ORDER_STATE_ACCEPTED;
		else if (choices_type.getCheckedId() == R.id.choice_2)
			return DatabaseConstants.ORDER_STATE_REJECTED;
		else if (choices_type.getCheckedId() == R.id.choice_3)
			return DatabaseConstants.ORDER_STATE_POSTPONED;
		else if (choices_type.getCheckedId() == R.id.choice_4)
			return DatabaseConstants.ORDER_STATE_DELIVERED;
		return 0;
	}

	boolean getOrderMode() {
		return choices_mode.getCheckedId() == R.id.choice_phone;
	}
}
package app.exploitr.std_management.ui.fragments;


import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.appcompat.widget.SwitchCompat;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import net.yslibrary.android.keyboardvisibilityevent.KeyboardVisibilityEvent;

import java.util.ArrayList;
import java.util.List;

import app.exploitr.std_management.adapters.FoodEditorAdapter;
import app.exploitr.std_management.io.FirebaseData;
import app.exploitr.std_management.io.FirebaseEditor;
import app.exploitr.storetodoor.Objects.FoodObject;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;
import me.himanshusoni.quantityview.QuantityView;

public class Foods extends Fragment {

	public Foods() {
		// Required empty public constructor
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	TextView show_start_mod, show_stop_mod;
	Button add_foods, save_time;
	QuantityView stop_mod, start_mod;
	RecyclerView food_list_admin_recycler;
	AppCompatSpinner selection_food_type, selection_food_type_2nd;

	SwitchCompat security_mode;

	List<String> mainList;
	List<String> secondaryList;

	FoodEditorAdapter adapter;
	AlertDialog save_dialogue;

	long currentStart, currentStop;

	@Override
	public void onAttach(@NonNull Context context) {
		super.onAttach(context);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.manage_fragment_foods, container, false);

		show_start_mod = root.findViewById(R.id.show_start_mod);
		show_stop_mod = root.findViewById(R.id.show_stop_mod);

		start_mod = root.findViewById(R.id.start_mod);
		stop_mod = root.findViewById(R.id.stop_mod);

		selection_food_type = root.findViewById(R.id.selection_food_type);
		selection_food_type_2nd = root.findViewById(R.id.selection_food_type_2nd);

		add_foods = root.findViewById(R.id.add_foods);
		save_time = root.findViewById(R.id.save_time);

		security_mode = root.findViewById(R.id.security_mode);

		food_list_admin_recycler = root.findViewById(R.id.food_list_admin_recycler);

		/*implement data security*/
		security_mode.setChecked(LocalDatabase.getInstance(getContext()).isSecurityEnabled());
		security_mode.setOnCheckedChangeListener((buttonView, isChecked) -> LocalDatabase.getInstance(getContext()).setSecurityMode(isChecked));

		/*load food data*/
		FirebaseData.getInstance().getMajorFoodList(new FirebaseData.FoodListListener() {
			@Override
			public void getFoodList(List<String> stringList) {
				mainList = stringList;
				selection_food_type.setAdapter(new ArrayAdapter<>(container.getContext(), R.layout.support_simple_spinner_dropdown_item, stringList));
				selection_food_type.setSelected(false);
			}

			@Override
			public void getFoodDetailList(ArrayList<FoodObject> stringList, long start, long end) {
			}
		});
		selection_food_type.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				FirebaseData.getInstance().getMinorFoodListNamesInternal(new FirebaseData.FoodListListener() {
					@Override
					public void getFoodList(List<String> stringList) {
						secondaryList = stringList;
						selection_food_type_2nd.setAdapter(new ArrayAdapter<>(container.getContext(), R.layout.support_simple_spinner_dropdown_item, stringList));
						selection_food_type.setSelected(false);
					}

					@Override
					public void getFoodDetailList(ArrayList<FoodObject> stringList, long start, long end) {
					}
				}, mainList.get(position));
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {

			}
		});
		selection_food_type_2nd.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				FirebaseData.getInstance().getMinorFoodList(mainList.get(selection_food_type.getSelectedItemPosition()), secondaryList.get(position), new FirebaseData.FoodListListener() {
					@Override
					public void getFoodList(List<String> stringList) {
						//ignored
					}

					@SuppressLint("NotifyDataSetChanged")
					@Override
					public void getFoodDetailList(ArrayList<FoodObject> foodList, long start, long end) {
						show_start_mod.setText("" + start);
						show_stop_mod.setText("" + end);

						start_mod.setQuantity((int) start);
						stop_mod.setQuantity((int) end);

						currentStart = start;
						currentStop = end;

						adapter = new FoodEditorAdapter(foodList,
								mainList.get(selection_food_type.getSelectedItemPosition()),
								secondaryList.get(selection_food_type_2nd.getSelectedItemPosition()),
								getActivity());

						food_list_admin_recycler.setAdapter(adapter);
						food_list_admin_recycler.setLayoutManager(new LinearLayoutManager(getActivity()));
						adapter.notifyDataSetChanged();
					}
				});
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});

		/*add food data*/
		add_foods.setOnClickListener(v -> {
			if (LocalDatabase.getInstance(getContext()).isSecurityEnabled()) {
				Toast.makeText(getContext(), "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
				return;
			}
			View view = getLayoutInflater().inflate(R.layout.recycler_admin_food_list_create, null);
			TextView min_quantity, food_desc, food_name;
			SwitchCompat special_switch, singleOrderable;
			Button gen_item_id;
			EditText item_id_entry_text;

			food_name = view.findViewById(R.id.food_name);
			food_desc = view.findViewById(R.id.food_desc);
			min_quantity = view.findViewById(R.id.min_quantity);
			special_switch = view.findViewById(R.id.special_switch);
			singleOrderable = view.findViewById(R.id.singleOrderable);
			gen_item_id = view.findViewById(R.id.gen_item_id);
			item_id_entry_text = view.findViewById(R.id.item_id_entry_text);

			gen_item_id.setOnClickListener(v1 ->
					item_id_entry_text.setText(String.valueOf(LocalDatabase.getInstance(getContext()).getMaxFoodCount() + 1)));

			save_dialogue = new AlertDialog.Builder(requireActivity())
					.setView(view)
					.setCancelable(false)
					.setPositiveButton("Save", (dialog, which) -> {
						if (min_quantity.getText().toString().equals("") || item_id_entry_text.getText().toString().equals("")) {
							Toast.makeText(getContext(), "ERROR, Fill up all the boxes", Toast.LENGTH_LONG).show();
							return;
						}
						FirebaseEditor.addOrUpdateFoodDetails(getContext(),
								mainList.get(selection_food_type.getSelectedItemPosition()),
								secondaryList.get(selection_food_type_2nd.getSelectedItemPosition()),
								food_name.getText().toString(), food_desc.getText().toString(), special_switch.isChecked(),
								singleOrderable.isChecked(),
								Long.parseLong(min_quantity.getText().toString()),
								Long.parseLong(item_id_entry_text.getText().toString()),
								true,
								new FirebaseEditor.FoodEditListener() {
									@SuppressLint("NotifyDataSetChanged")
									@Override
									public void onAddUpdateFood() {
										if (save_dialogue.isShowing())
											save_dialogue.dismiss();
										adapter.notifyDataSetChanged();
										FirebaseEditor.updateMaxFoodCount(getContext());
									}

									@Override
									public void onDelFood() {
										//ignored
									}
								});
					})
					.setNegativeButton("Cancel", null)
					.create();

			if (!requireActivity().isFinishing())
				save_dialogue.show();
		});

		/*manage time*/

		start_mod.setOnQuantityChangeListener(new QuantityView.OnQuantityChangeListener() {
			@Override
			public void onQuantityChanged(int oldQuantity, int newQuantity, boolean programmatically) {
				long new_val = newQuantity > oldQuantity ? currentStart + (newQuantity - oldQuantity) : currentStart - (oldQuantity - newQuantity);
				currentStart = new_val > 23 ? currentStart : new_val;
				show_start_mod.setText("" + currentStart);
			}

			@Override
			public void onLimitReached() {

			}
		});
		stop_mod.setOnQuantityChangeListener(new QuantityView.OnQuantityChangeListener() {
			@Override
			public void onQuantityChanged(int oldQuantity, int newQuantity, boolean programmatically) {
				long new_val = newQuantity > oldQuantity ? currentStop + (newQuantity - oldQuantity) : currentStop - (oldQuantity - newQuantity);
				currentStop = new_val > 23 ? currentStop : new_val;
				show_stop_mod.setText("" + currentStop);
			}

			@Override
			public void onLimitReached() {

			}
		});

		save_time.setOnClickListener(v -> {
			if (currentStop < currentStart) {
				Toast.makeText(getContext(), "END TIME IS LESS THAT START TIME!", Toast.LENGTH_SHORT).show();
				return;
			} else {
				if (currentStart == 24)
					currentStart = 0;
				if (currentStop == 24)
					currentStop = 0;
			}

			FirebaseEditor.changeTime(getContext(), currentStart, currentStop,
					mainList.get(selection_food_type.getSelectedItemPosition()),
					secondaryList.get(selection_food_type_2nd.getSelectedItemPosition()));
		});

		KeyboardVisibilityEvent.setEventListener(
				requireActivity(),
				isOpen -> root.findViewById(R.id.card_timing_manage)
						.setVisibility(isOpen ? View.GONE : View.VISIBLE));
		return root;
	}

	@Override
	public void onPause() {
		if (adapter != null)
			adapter.onStop();
		if (save_dialogue != null && save_dialogue.isShowing())
			save_dialogue.dismiss();
		super.onPause();
	}
}
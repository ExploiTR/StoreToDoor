package app.exploitr.std_management.ui.fragments;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.InputType;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.button.MaterialButton;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.SetOptions;
import com.google.firebase.storage.StorageReference;
import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;

import java.io.File;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;

import app.exploitr.std_management.Objects.OfferObject;
import app.exploitr.std_management.adapters.OfferAdapter;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import co.lujun.androidtagview.TagContainerLayout;
import co.lujun.androidtagview.TagView;
import droidninja.filepicker.FilePickerBuilder;
import droidninja.filepicker.FilePickerConst;
import droidninja.filepicker.utils.ContentUriUtils;

public class Offers extends Fragment implements TimePickerDialog.OnTimeSetListener, DatePickerDialog.OnDateSetListener {

	RecyclerView all_offers;
	MaterialButton upload_offer, set_offer;
	ArrayList<OfferObject> allImages;
	OfferAdapter offerAdapter;
	BottomSheetDialog offer_dialogue;
	AlertDialog list_food;

	Map<String, DocumentSnapshot> offers;

	long start_offer_time_set, expiry_offer_time_set;
	Calendar time_setter;
	boolean date_picked = false;

	EditText offer_name_text, offer_amount_text;
	TextView offer_start_text, offer_expiry_text;
	TagContainerLayout offer_food_list;
	MaterialButton change_time_in_offer, add_foods_in_offer, save_offer_settings;
	AppCompatSpinner select_offer;

	private static final int REQ_CODE_PICK_PHOTO = 345;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@SuppressLint("NotifyDataSetChanged")
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.fragment_offers, container, false);

		all_offers = root.findViewById(R.id.all_offers);
		upload_offer = root.findViewById(R.id.upload_offer);
		set_offer = root.findViewById(R.id.set_offer);

		allImages = new ArrayList<>();

		DatabaseConstants.getFDS()
				.getReference()
				.child("/offers/")
				.listAll()
				.addOnSuccessListener(listResult -> {
					for (StorageReference reference : listResult.getItems()) {
						reference.getDownloadUrl().addOnSuccessListener(uri -> {
							allImages.add(new OfferObject(uri, reference));
							if (offerAdapter != null)
								offerAdapter.notifyDataSetChanged();
						}).addOnFailureListener(e -> Toast.makeText(getActivity(),
								"Can't load images, network problem or server problem!", Toast.LENGTH_SHORT).show());
					}
				}).addOnFailureListener(e -> Toast.makeText(getActivity(), "Can't load images, network problem or server problem!",
				Toast.LENGTH_SHORT).show());

		offerAdapter = new OfferAdapter(allImages, (of_ob, parentPos) -> {
			of_ob.getReference().delete().addOnSuccessListener(aVoid -> Toast.makeText(getContext(), "Offer Deleted!", Toast.LENGTH_SHORT).show())
					.addOnFailureListener(e -> Toast.makeText(getContext(), "Err, Can't delete offer! Permission or Network problem!", Toast.LENGTH_SHORT).show());
			if (offerAdapter != null) {
				allImages.remove(parentPos);
				offerAdapter.notifyDataSetChanged();
				offerAdapter.notifyItemRemoved(parentPos);
				offerAdapter.notifyItemChanged(parentPos);
			}
		});

		upload_offer.setOnClickListener(v -> FilePickerBuilder.getInstance()
				.setMaxCount(1) //optional
				.enableDocSupport(false)
				.enableCameraSupport(false)
				.enableSelectAll(false)
				.enableVideoPicker(false)
				.enableImagePicker(true)
				.showGifs(false)
				.setSpan(FilePickerConst.SPAN_TYPE.DETAIL_SPAN, 4)
				.setActivityTheme(R.style.LibAppTheme_Dark) //optional
				.pickPhoto(this, REQ_CODE_PICK_PHOTO));

		set_offer.setOnClickListener(v -> setupOfferSettings());

		all_offers.setAdapter(offerAdapter);
		all_offers.setLayoutManager(new LinearLayoutManager(getActivity()));
		return root;
	}

	private void setupOfferSettings() {
		offer_dialogue = new BottomSheetDialog(getActivity());
		offer_dialogue.setCancelable(true);
		offer_dialogue.setContentView(R.layout.offer_diag_settings);

		if (getActivity() != null && !getActivity().isFinishing())
			offer_dialogue.show();

		offer_name_text = offer_dialogue.findViewById(R.id.offer_name_text);
		offer_amount_text = offer_dialogue.findViewById(R.id.offer_amount_text);
		offer_start_text = offer_dialogue.findViewById(R.id.offer_start_text);
		offer_expiry_text = offer_dialogue.findViewById(R.id.offer_expiry_text);
		offer_food_list = offer_dialogue.findViewById(R.id.offer_food_list);
		change_time_in_offer = offer_dialogue.findViewById(R.id.change_time_in_offer);
		add_foods_in_offer = offer_dialogue.findViewById(R.id.add_foods_in_offer);
		save_offer_settings = offer_dialogue.findViewById(R.id.save_offer_settings);
		select_offer = offer_dialogue.findViewById(R.id.select_offer);

		change_time_in_offer.setOnClickListener(v -> pickDate_Time());

		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat format = new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss", Locale.getDefault());

		offers = new HashMap<>();

		DatabaseConstants.getFDB()
				.collection(DatabaseConstants.MAIN_OFFERS)
				.get()
				.addOnSuccessListener(queryDocumentSnapshots -> {
					for (DocumentSnapshot ref : queryDocumentSnapshots) {
						offers.put(ref.getId(), ref);
					}
					select_offer.setAdapter(new ArrayAdapter<>(getContext(), R.layout.support_simple_spinner_dropdown_item,
							offers.keySet().toArray(new String[0])));
					select_offer.setSelection(0);
				}).addOnFailureListener(e -> Toast.makeText(getContext(),
				"Can't load offers!", Toast.LENGTH_SHORT).show());

		select_offer.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				//reset
				start_offer_time_set = 0L;
				expiry_offer_time_set = 0L;
				date_picked = false;
				//reset

				DocumentSnapshot ref = offers.get(offers.keySet().toArray(new String[0])[position]);

				long start = Long.parseLong(String.valueOf(ref.get(DatabaseConstants.OFFER_START)));
				long end = Long.parseLong(String.valueOf(ref.get(DatabaseConstants.OFFER_EXPIRY)));
				String offer_name = String.valueOf(ref.get(DatabaseConstants.OFFER_NAME));
				long offerAmt = Long.parseLong(String.valueOf(ref.get(DatabaseConstants.OFFER_AMOUNT)));
				ArrayList<Long> fd_all = (ArrayList<Long>) ref.get(DatabaseConstants.OFFER_FOOD_LIST);

				start_offer_time_set = start;
				expiry_offer_time_set = end;

				calendar.setTimeInMillis(start);
				format.setCalendar(calendar);
				offer_start_text.setText(new StringBuilder("Offer start : " + format.format(calendar.getTime())));

				calendar.setTimeInMillis(end);
				format.setCalendar(calendar);
				offer_expiry_text.setText(new StringBuilder("Offer end : " + format.format(calendar.getTime())));

				offer_name_text.setText(offer_name);
				offer_amount_text.setText(String.valueOf(offerAmt));

				offer_food_list.setTags(Arrays.toString(fd_all.toArray())
						.replace("[", "")
						.replace("]", "")
						.split(","));

				offer_food_list.setOnTagClickListener(new TagView.OnTagClickListener() {
					@Override
					public void onTagClick(int position, String text) {

					}

					@Override
					public void onTagLongClick(int position, String text) {
						Toast.makeText(getContext(), "Food id : " + text + "removed.", Toast.LENGTH_SHORT).show();
					}

					@Override
					public void onSelectedTagDrag(int position, String text) {

					}

					@Override
					public void onTagCrossClick(int position) {

					}
				});
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {

			}
		});

		save_offer_settings.setOnClickListener(v -> {
			DocumentSnapshot ref = offers.get(offers.keySet().toArray(new String[0])[select_offer.getSelectedItemPosition()]);
			long end = expiry_offer_time_set;
			long start = start_offer_time_set;
			String offer_name = offer_name_text.getText().toString();
			long offerAmt = Long.parseLong(offer_amount_text.getText().toString());

			ArrayList<Long> fd_all = new ArrayList<>();
			for (String s : offer_food_list.getTags()) fd_all.add(Long.parseLong(s));

			Map<String, Object> map = new HashMap<>();
			map.put(DatabaseConstants.OFFER_AMOUNT, offerAmt);
			map.put(DatabaseConstants.OFFER_START, start);
			map.put(DatabaseConstants.OFFER_EXPIRY, end);
			map.put(DatabaseConstants.OFFER_FOOD_LIST, fd_all);
			map.put(DatabaseConstants.OFFER_NAME, offer_name);

			ref.getReference()
					.set(map, SetOptions.merge())
					.addOnSuccessListener(unused -> Toast.makeText(getContext(), "Offer is updated", Toast.LENGTH_SHORT).show())
					.addOnFailureListener(e -> Toast.makeText(getContext(), "Failed to update offer!", Toast.LENGTH_SHORT).show());
		});

		add_foods_in_offer.setOnClickListener(v -> {

			HashSet<String> food_all = new HashSet<>(offer_food_list.getTags());

			EditText food = new EditText(getActivity());
			food.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED);

			list_food = new AlertDialog.Builder(getActivity())
					.setTitle("Select Foods")
					.setView(food)
					.setPositiveButton("Add", (dialog, which) -> {
						String add_try_number = String.valueOf(food.getText());
						long add_try_num = Long.parseLong(add_try_number);

						if (add_try_num == -1) {
							food_all.clear();
							food_all.add("-1");
						} else food_all.remove("-1");

						food_all.add(String.valueOf(food.getText()));
						offer_food_list.setTags(food_all.toArray(new String[0]));
					})
					.setNegativeButton("Cancel", null)
					.create();

			if (!getActivity().isFinishing())
				list_food.show();
		});

		if (offer_dialogue != null && !getActivity().isFinishing())
			offer_dialogue.show();
	}

	private void pickDate_Time() {
		time_setter = Calendar.getInstance();
		DatePickerDialog dialog = DatePickerDialog.newInstance(Offers.this,
				time_setter);
		dialog.show(getParentFragmentManager(), "date choose");
		Toast.makeText(getContext(), date_picked ? "Pick End Date & Time!" : "Pick Start Date & Time!", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
		if (requestCode == REQ_CODE_PICK_PHOTO && resultCode == Activity.RESULT_OK) {
			try {
				upload((Uri) data.getParcelableArrayListExtra(FilePickerConst.KEY_SELECTED_MEDIA).get(0));
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	private void upload(Uri uri) throws URISyntaxException {
		File file = new File(ContentUriUtils.INSTANCE.getFilePath(getContext(), uri));
		DatabaseConstants.getFDS()
				.getReference()
				.child("/offers/" + System.currentTimeMillis() + ".jpg")
				.putFile(Uri.fromFile(file))
				.addOnSuccessListener(taskSnapshot -> Toast.makeText(getActivity(), "Offer Image Uploaded", Toast.LENGTH_SHORT).show())
				.addOnFailureListener(e -> Toast.makeText(getActivity(), "Offer Image Upload Failed!", Toast.LENGTH_SHORT).show());
	}

	@Override
	public void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {
		time_setter.set(Calendar.YEAR, year);
		time_setter.set(Calendar.MONTH, monthOfYear);
		time_setter.set(Calendar.DAY_OF_MONTH, dayOfMonth);

		TimePickerDialog dialog = TimePickerDialog.newInstance(Offers.this,
				time_setter.get(Calendar.HOUR_OF_DAY),
				time_setter.get(Calendar.MINUTE),
				time_setter.get(Calendar.SECOND),
				false);
		dialog.show(getParentFragmentManager(), "When do you want to get the food?");
	}

	@Override
	public void onTimeSet(TimePickerDialog view, int hourOfDay, int minute, int second) {
		//chained timing from onDateSet
		time_setter.set(Calendar.HOUR_OF_DAY, hourOfDay);
		time_setter.set(Calendar.MINUTE, minute);
		time_setter.set(Calendar.SECOND, second);

		SimpleDateFormat format = new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss", Locale.getDefault());
		format.setCalendar(time_setter);

		if (date_picked) {
			expiry_offer_time_set = time_setter.getTimeInMillis();
			offer_expiry_text.setText(format.format(time_setter.getTime()));
		} else {
			start_offer_time_set = time_setter.getTimeInMillis();
			offer_start_text.setText(format.format(time_setter.getTime()));
		}

		if (!date_picked) {
			date_picked = true;
			pickDate_Time();
		} else {
			date_picked = false;
		}
	}
}
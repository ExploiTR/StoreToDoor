package app.exploitr.std_management.io;


import static app.exploitr.storetodoor.functions.majors.DatabaseConstants.TAG;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import app.exploitr.order_sync_management.NotificationHandler;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.FirebaseAccess;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;

public class FCM_Service extends FirebaseMessagingService {

    public static final String DATA_TRANSFER = "data_tr";

    @Override
    public void onNewToken(@NonNull String token) {
        Log.d(TAG, "Refreshed token: " + token);
        LocalDatabase.getInstance(getBaseContext()).saveToken(token);
        FirebaseAccess.saveConfig(this);
        super.onNewToken(token);
    }

    @Override
    public void onMessageSent(@NonNull String s) {
        super.onMessageSent(s);
    }

    @Override
    public void onMessageReceived(@NonNull RemoteMessage remoteMessage) {
        sendNotification(remoteMessage);
        super.onMessageReceived(remoteMessage);
    }

    private void sendNotification(RemoteMessage remoteMessage) {
        Intent intent = new Intent(this, NotificationHandler.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);

        String all = remoteMessage.getData().get("message");
        all = all.substring(1, all.length() - 1);

        intent.putExtra(DATA_TRANSFER, all);

        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent,
                PendingIntent.FLAG_ONE_SHOT);

        RemoteMessage.Notification notification = remoteMessage.getNotification();

        String channelId = getString(R.string.order_notifications);
        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        NotificationCompat.Builder notificationBuilder =
                new NotificationCompat.Builder(this, channelId)
                        .setSmallIcon(R.drawable.ic_orders)
                        .setContentTitle(notification.getTitle())
                        .setContentText(notification.getBody())
                        .setAutoCancel(false)
                        .setOngoing(false)
                        .setSound(defaultSoundUri)
                        .setContentIntent(pendingIntent);

        NotificationManager notificationManager =
                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(channelId,
                    getString(R.string.order_notifications),
                    NotificationManager.IMPORTANCE_HIGH);
            notificationManager.createNotificationChannel(channel);
        }

        notificationManager.notify((int) (System.currentTimeMillis() / 1000) /* ID of notification */, notificationBuilder.build());
    }
}

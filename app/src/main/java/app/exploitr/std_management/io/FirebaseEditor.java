package app.exploitr.std_management.io;

import android.content.Context;
import android.widget.Toast;

import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FieldValue;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;

import java.util.HashMap;
import java.util.Map;

import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;

public class FirebaseEditor {

	private static FirebaseFirestore db() {
		return DatabaseConstants.getFDB();
	}

	/*Food Edits*/

	public static void updateMaxFoodCount(Context context) {
		DatabaseConstants.getFDB()
				.collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.get().addOnSuccessListener(documentSnapshot -> {
					long how_much = (long) documentSnapshot.get(DatabaseConstants.MAX_FOOD_COUNT);
					LocalDatabase.getInstance(context).saveMaxFoodCount(how_much + 1);

					Map<String, Object> map = new HashMap<>();
					map.put(DatabaseConstants.MAX_FOOD_COUNT, how_much + 1);

					documentSnapshot.getReference().set(map, SetOptions.merge()).addOnCompleteListener(task ->
							Toast.makeText(context, task.isSuccessful() ? "Done updating food count" : "Food count update failed!",
									Toast.LENGTH_SHORT).show());
				});
	}

	public static void changeTime(Context context, long currentStart, long currentStop, String main, String sub) {
		if (LocalDatabase.getInstance(context).isSecurityEnabled()) {
			Toast.makeText(context, "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
			return;
		}
		Map<String, Object> map = new HashMap<>();
		map.put(DatabaseConstants.TIME_TABLE_START, currentStart);
		map.put(DatabaseConstants.TIME_TABLE_STOP, currentStop);
		CollectionReference local_ref = db().collection(DatabaseConstants.MAIN_FOODS)
				.document(main)
				.collection(sub);

		DocumentReference reference = local_ref.document(DatabaseConstants.TIME_TABLE);

		reference.set(map, SetOptions.merge()).addOnCompleteListener(task -> {
			Toast.makeText(context, task.isSuccessful() ? "Done updating time" : "Time update failed!", Toast.LENGTH_SHORT).show();
		});
	}

	public static void addStore(Context context, String main, String major_food_name, boolean special,
								String minor_food_name, String store_name, long price, StoreEditListener listener) {
		if (LocalDatabase.getInstance(context).isSecurityEnabled()) {
			Toast.makeText(context, "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
			return;
		}
		Map<String, Object> map = new HashMap<>();
		map.put(store_name, price);
		CollectionReference local_ref = db().collection(DatabaseConstants.MAIN_FOODS)
				.document(main)
				.collection(major_food_name);

		DocumentReference reference = special ? (local_ref.document(DatabaseConstants.SPECIAL_ITEM)
				.collection(DatabaseConstants.SPECIAL_ITEM)
				.document(minor_food_name)) : local_ref.document(minor_food_name);

		reference.set(map, SetOptions.merge()).addOnCompleteListener(task -> {
			Toast.makeText(context, task.isSuccessful() ? "Store Added" : "Store Add Failed", Toast.LENGTH_SHORT).show();
			if (task.isSuccessful())
				listener.onModStore();
		});
	}

	public static void delStore(Context context, String main, String major_food_name, boolean special,
								String minor_food_name, String store_name, StoreEditListener listener) {
		if (LocalDatabase.getInstance(context).isSecurityEnabled()) {
			Toast.makeText(context, "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
			return;
		}
		Map<String, Object> map = new HashMap<>();
		map.put(store_name, FieldValue.delete());
		CollectionReference local_ref = db().collection(DatabaseConstants.MAIN_FOODS)
				.document(main)
				.collection(major_food_name);

		DocumentReference reference = special ? (local_ref.document(DatabaseConstants.SPECIAL_ITEM)
				.collection(DatabaseConstants.SPECIAL_ITEM)
				.document(minor_food_name)) : local_ref.document(minor_food_name);

		reference.set(map, SetOptions.merge()).addOnCompleteListener(task -> {
			Toast.makeText(context, task.isSuccessful() ? "Store Deleted" : "Store Delete Failed", Toast.LENGTH_SHORT).show();
			if (task.isSuccessful())
				listener.onModStore();
		});
	}

	public static void addOrUpdateFoodDetails(Context context, String main, String major_food_name, String minor_food_name, String desc,
											  boolean special, boolean singleOrderable,
											  long min_order_quantity, long item_id, boolean isOutOfStock, FoodEditListener listener) {
		if (LocalDatabase.getInstance(context).isSecurityEnabled()) {
			Toast.makeText(context, "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
			return;
		}
		Map<String, Object> map = new HashMap<>();
		map.put(DatabaseConstants.ITEM_DESC, desc);
		map.put(DatabaseConstants.SINGLE_ORDERABLE, singleOrderable);
		map.put(DatabaseConstants.MIN_ORDER, min_order_quantity);
		map.put(DatabaseConstants.OUT_OF_STOCK, isOutOfStock);
		map.put(DatabaseConstants.ITEM_ID, item_id);

		CollectionReference local_ref = db().collection(DatabaseConstants.MAIN_FOODS)
				.document(main)
				.collection(major_food_name);

		DocumentReference reference = special ? (local_ref.document(DatabaseConstants.SPECIAL_ITEM)
				.collection(DatabaseConstants.SPECIAL_ITEM)
				.document(minor_food_name)) : local_ref.document(minor_food_name);

		reference.set(map, SetOptions.merge()).addOnCompleteListener(task -> {
			Toast.makeText(context, task.isSuccessful() ? "Food Added" : "Food Add Failed", Toast.LENGTH_SHORT).show();
			if (task.isSuccessful())
				listener.onAddUpdateFood();
		});
	}

	public static void deleteFoodDetails(Context context, String main, String major_food_name, String minor_food_name,
										 boolean special, FoodEditListener listener) {
		if (LocalDatabase.getInstance(context).isSecurityEnabled()) {
			Toast.makeText(context, "Disable Security Mode To Make Changes", Toast.LENGTH_SHORT).show();
			return;
		}
		CollectionReference local_ref = db().collection(DatabaseConstants.MAIN_FOODS)
				.document(main)
				.collection(major_food_name);

		DocumentReference reference = special ? (local_ref.document(DatabaseConstants.SPECIAL_ITEM)
				.collection(DatabaseConstants.SPECIAL_ITEM)
				.document(minor_food_name)) : local_ref.document(minor_food_name);

		reference.delete().addOnCompleteListener(task -> {
			Toast.makeText(context, task.isSuccessful() ? "Food Deleted" : "Food Delete Failed", Toast.LENGTH_SHORT).show();
			if (task.isSuccessful())
				listener.onDelFood();
		});
	}

	/*Order Edits*/



	/*Listeners*/

	public interface StoreEditListener {
		void onModStore();
	}

	public interface FoodsEditListener {
		void onChangeTime();
	}

	public interface FoodEditListener {
		void onAddUpdateFood();

		void onDelFood();
	}
}

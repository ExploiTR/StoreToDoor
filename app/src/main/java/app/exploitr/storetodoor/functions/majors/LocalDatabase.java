package app.exploitr.storetodoor.functions.majors;

import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;

import androidx.annotation.Nullable;

import java.util.Set;

public class LocalDatabase {
	private final SharedPreferences preferences;
	private static LocalDatabase instance;

	private static final String USER_NAME = "username";
	private static final String PASSWORD = "password";
	private static final String PHONE_NUMBER = "phone";
	private static final String LAST_ADDRESS = "address";
	private static final String LANDMARK = "landmark";

	private static final String MAX_FOOD_COUNT = "max_food_count";

	private static final String SECURITY = "security";

	private static final String LAT_INFO = "lat";
	private static final String LONG_INFO = "lon";
	private static final String DISTANCE = "distance";

	private static final String TOKEN = "token";
	private static final String ADMIN_TOKEN = "admin_token";
	private static final String ADMIN_MODE = "admin_mode";
	private static final String ADMIN_UID = "admin_uid";
	private static final String SERVER_KEY = "server_key";

	public boolean getOrdersEnabled() {
		return preferences.getBoolean(ORDERS_ENABLED, false);
	}

	public void setOrdersEnabled() {
		preferences.edit().putBoolean(ORDERS_ENABLED, true).apply();
	}

	private static final String ORDERS_ENABLED = "orders_enabled";


	private LocalDatabase(Context context) {
		preferences = PreferenceManager.getDefaultSharedPreferences(context);
	}

	public static LocalDatabase getInstance(Context mContext) {
		return instance != null && instance.preferences != null ? instance : (instance = new LocalDatabase(mContext));
	}

	@Nullable
	public String getUsername() {
		return preferences.getString(USER_NAME, null);
	}

	public LocalDatabase setUsername(String username) {
		preferences.edit().putString(USER_NAME, username).apply();
		return this;
	}

	@Nullable
	public String getPassword() {
		return preferences.getString(PASSWORD, null);
	}

	public LocalDatabase setPassword(String password) {
		preferences.edit().putString(PASSWORD, password).apply();
		return this;
	}

	@Nullable
	public String getPhoneNumber() {
		return preferences.getString(PHONE_NUMBER, null);
	}

	public void setPhone(String phone) {
		preferences.edit().putString(PHONE_NUMBER, phone).apply();
	}

	@Nullable
	public String getLastAddress() {
		return preferences.getString(LAST_ADDRESS, null);
	}

	public LocalDatabase setLastAddress(String address) {
		preferences.edit().putString(LAST_ADDRESS, address).apply();
		return this;
	}

	public double getLatitude() {
		return Double.longBitsToDouble(preferences.getLong(LAT_INFO, 0L));
	}

	public LocalDatabase setLatitude(double latitude) {
		preferences.edit().putLong(LAT_INFO, Double.doubleToRawLongBits(latitude)).apply();
		return this;
	}


	public double getLongitude() {
		return Double.longBitsToDouble(preferences.getLong(LONG_INFO, 0L));
	}

	public LocalDatabase setLongitude(double longitude) {
		preferences.edit().putLong(LONG_INFO, Double.doubleToRawLongBits(longitude)).apply();
		return this;
	}

	public void setLandmark(String landmark) {
		preferences.edit().putString(LANDMARK, landmark).apply();
	}

	@Nullable
	public String getLandmark() {
		return preferences.getString(LANDMARK, null);
	}

	public void setDistance(double distance) {
		preferences.edit().putLong(DISTANCE, Double.doubleToRawLongBits(distance)).apply();
	}

	public double getDistance() {
		return Double.longBitsToDouble(preferences.getLong(DISTANCE, 0L));
	}

	public void setSecurityMode(boolean enforce) {
		preferences.edit().putBoolean(SECURITY, enforce).apply();
	}

	public boolean isSecurityEnabled() {
		return preferences.getBoolean(SECURITY, true);
	}

	public void saveToken(String token) {
		preferences.edit().putString(TOKEN, token).apply();
	}

	public String getTOKEN() {
		return preferences.getString(TOKEN, null);
	}

	public void saveAdminToken(String token) {
		preferences.edit().putString(ADMIN_TOKEN, token).apply();
	}

	public String getAdminTOKEN() {
		return preferences.getString(ADMIN_TOKEN, null);
	}

	public void saveMaxFoodCount(long token) {
		preferences.edit().putLong(MAX_FOOD_COUNT, token).apply();
	}

	public long getMaxFoodCount() {
		return preferences.getLong(MAX_FOOD_COUNT, 0L);
	}

	public void saveAdminUid(Set<String> token) {
		preferences.edit().putStringSet(ADMIN_UID, token).apply();
	}

	public Set<String> getAdminUidS() {
		return preferences.getStringSet(ADMIN_UID, null);
	}

	public void setServerKey(String key) {
		preferences.edit().putString(SERVER_KEY, key).apply();
	}

	public String getServerKey() {
		return preferences.getString(SERVER_KEY, null);
	}

	public void clear() {
		preferences.edit().clear().apply();
	}

	//true for client and false for admin
	public void setLaunchMode(boolean enforce) {
		preferences.edit().putBoolean(ADMIN_MODE, enforce).apply();
	}

	//true for client and false for admin
	public boolean isLaunchModeClient() {
		return preferences.getBoolean(ADMIN_MODE, true);
	}
}

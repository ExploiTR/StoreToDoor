package app.exploitr.storetodoor.functions.majors;

import android.content.Context;
import android.widget.Toast;

import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

public class FirebaseAccess {
	private static FirebaseFirestore db() {
		return DatabaseConstants.getFDB();
	}

	private static StorageReference dbs() {
		return DatabaseConstants.getFDS().getReference();
	}

	public static StorageReference GPay_Info() {
		return dbs().child(DatabaseConstants.G_PAY_IMAGE_TAG);
	}

	public static void getPaymentAddress(FirebaseAccessListener listener) {
		db().collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.get().addOnSuccessListener(documentSnapshot ->
				listener.onGPayAddressReceived(String.valueOf(documentSnapshot.get("GPAY_ID"))))
				.addOnFailureListener(Throwable::printStackTrace);
	}

	public static void saveConfigUpdate(Context context) {
		db().collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.get()
				.addOnSuccessListener(documentSnapshot ->
						LocalDatabase.getInstance(context)
								.saveAdminToken(String.valueOf(documentSnapshot.get(DatabaseConstants.ADMIN_TOKEN))))
				.addOnFailureListener(e -> Toast.makeText(context, "Can't access server info", Toast.LENGTH_SHORT).show());
	}

	public static void saveConfig(Context context) {
		db().collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.get()
				.addOnSuccessListener(documentSnapshot -> {
					LocalDatabase.getInstance(context).setServerKey(String.valueOf(documentSnapshot.get(DatabaseConstants.SERVER_KEY)));
					LocalDatabase.getInstance(context).saveAdminToken(String.valueOf(documentSnapshot.get(DatabaseConstants.ADMIN_TOKEN)));
				/*	LocalDatabase.getInstance(context).saveUSP_A(String.valueOf(documentSnapshot.get(DatabaseConstants.USP_ACCESS)));
					LocalDatabase.getInstance(context).saveUSP_S(String.valueOf(documentSnapshot.get(DatabaseConstants.USP_SECRET)));*/

					ArrayList<String> uid_all = (ArrayList<String>) documentSnapshot.get(DatabaseConstants.ADMIN_UID);
					if (uid_all != null) {
						LocalDatabase.getInstance(context)
								.saveAdminUid(new HashSet<>(uid_all));
					}
				}).addOnFailureListener(e -> Toast.makeText(context, "Can't access server info", Toast.LENGTH_SHORT).show());
	}

	//warning : use Strictly
	public static void setAdminConfig(Context context) {
		Map<String, String> data = new HashMap<>();
		data.put(DatabaseConstants.ADMIN_TOKEN, LocalDatabase.getInstance(context).getTOKEN());
		db().collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.set(data, SetOptions.merge())
				.addOnSuccessListener(documentSnapshot -> Toast.makeText(context, "Sync done", Toast.LENGTH_SHORT).show())
				.addOnFailureListener(e -> Toast.makeText(context, "Can't access server info", Toast.LENGTH_SHORT).show());
	}

	public interface FirebaseAccessListener {
		void onGPayAddressReceived(String id);
	}
}

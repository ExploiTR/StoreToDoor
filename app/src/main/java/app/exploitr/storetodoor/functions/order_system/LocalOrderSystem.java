package app.exploitr.storetodoor.functions.order_system;

import android.os.Handler;
import android.os.Looper;

import app.exploitr.storetodoor.Objects.FoodObject;
import app.exploitr.storetodoor.Objects.LocalOrders;
import io.realm.Realm;
import io.realm.RealmConfiguration;
import io.realm.RealmResults;

public class LocalOrderSystem {

	public static Realm getRealm() {
		return Realm.getInstance(new RealmConfiguration.Builder()
				.schemaVersion(1)
				.deleteRealmIfMigrationNeeded()
				.build());
	}

	public static RealmResults<LocalOrders> getOrders() {
		return getRealm().where(LocalOrders.class).findAll();
	}

	public static void removeOrders(long item_id, LocalOrderSystemListener localOrderSystemListener) {
		getRealm().executeTransactionAsync(realm -> realm.where(LocalOrders.class)
						.equalTo("item_id", item_id)
						.findFirst()
						.deleteFromRealm(), () -> new Handler(Looper.getMainLooper()).post(localOrderSystemListener::onSuccess),
				error -> new Handler(Looper.getMainLooper()).post(localOrderSystemListener::onFailure));
	}

	public static void removeOrdersAll(LocalOrderSystemListener localOrderSystemListener) {
		getRealm().executeTransactionAsync(realm -> realm.where(LocalOrders.class)
				.findAll().deleteAllFromRealm(), localOrderSystemListener::onSuccess,
				error -> localOrderSystemListener.onFailure());
	}

	public static void updateOrders(long item_id, int updatedCount, LocalOrderSystemListener localOrderSystemListener) {
		getRealm().executeTransactionAsync(realm -> {
			try {
				realm.where(LocalOrders.class)
						.equalTo("item_id", item_id)
						.findFirst()
						.setFood_count(updatedCount);
				new Handler(Looper.getMainLooper()).post(localOrderSystemListener::onSuccess);
			} catch (Exception ignored) {
				new Handler(Looper.getMainLooper()).post(localOrderSystemListener::onFailure);
			}
		});
	}

	public static void addOrders(FoodObject object, long item_id, int quantity, long min_order, int store, boolean single) {
		getRealm().executeTransactionAsync(realm -> realm.copyToRealmOrUpdate(new LocalOrders()
				.setItem_id(item_id)
				.setFood_count(quantity)
				.setFood_name(object.getMajorFood())
				.setFood_price(object.getPrices().get(store).getPrice())
				.setSingleOrderable(single)
				.setStore_id(store)
				.setStore_name(object.getPrices().get(store).getStore())
				.setMin_orders(min_order)));
	}

	public interface LocalOrderSystemListener {
		void onSuccess();

		void onFailure();
	}
}
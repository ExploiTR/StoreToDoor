package app.exploitr.storetodoor.functions.order_system;

import android.content.Context;
import android.util.Base64;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import app.exploitr.order_sync_management.Sync;
import app.exploitr.storetodoor.Objects.LocalOrders;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;

public class FoodOrderManager {

	private static long AMT_TOTAL = 0;

	private static final ExecutorService taskExecutor = Executors.newFixedThreadPool(4);

	public static void activateOnce(Context context) {
		if (FirebaseAuth.getInstance().getCurrentUser() == null || LocalDatabase.getInstance(context).getOrdersEnabled())
			return;
		FirebaseFirestore db = DatabaseConstants.getFDB();
		DocumentReference order_ref = db.collection(DatabaseConstants.MAIN_ORDERS)
				.document(Objects.requireNonNull(FirebaseAuth.getInstance().getCurrentUser()).getUid());
		Map<String, Boolean> activateMap = new HashMap<>();
		activateMap.put("activate", true);
		order_ref.set(activateMap, SetOptions.merge())
				.addOnSuccessListener(unused -> LocalDatabase.getInstance(context).setOrdersEnabled());
	}

	public static void place(AppCompatActivity context, int mode, long order_number, long timeInMillis, OrderPlacingListener listener) {
		if (verifyOrders()) {
			taskExecutor.execute(() -> addOrder(context, mode, order_number, timeInMillis, listener));
		} else
			Toast.makeText(context, "Can't place order, please check again!", Toast.LENGTH_SHORT).show();
	}

	private static void addOrder(Context context, int mode, long order_number, long timeInMillis,
								 OrderPlacingListener listener) {
		FirebaseFirestore db = DatabaseConstants.getFDB();
		DocumentReference order_ref = db.collection(DatabaseConstants.MAIN_ORDERS)
				.document(Objects.requireNonNull(FirebaseAuth.getInstance().getCurrentUser()).getUid());

		if (!LocalDatabase.getInstance(context).getOrdersEnabled()) {
			activateOnce(context);
		}

		Map<String, Object> totalMap = new HashMap<>();
		Map<String, Object> orderMap = makeMap();

		totalMap.put(DatabaseConstants.DELIVERY_TIME, timeInMillis);
		totalMap.put(DatabaseConstants.USER_UID, FirebaseAuth.getInstance().getCurrentUser().getUid());

		totalMap.put(DatabaseConstants.ORDER_DATA, Base64.encodeToString(orderMap.toString()
				.getBytes(StandardCharsets.UTF_8), Base64.NO_PADDING)); //highlight encoded
		LocalDatabase operator = LocalDatabase.getInstance(context);

		totalMap.put(DatabaseConstants.ORDER_ADDRESS,
				Base64.encodeToString((
						operator.getLatitude() + "," + operator.getLongitude() + " ; " +
								operator.getLastAddress() + "; Landmark - " + operator.getLandmark())
						.getBytes(StandardCharsets.UTF_8), Base64.NO_PADDING)); //highlight encoded

		totalMap.put(DatabaseConstants.DELIVERY_CHARGE, (int)
				Math.floor(operator.getDistance() * 1.25 * DatabaseConstants.DELIVERY_CHARGE_PER_KM));
		totalMap.put(DatabaseConstants.ORDER_STATE, DatabaseConstants.ORDER_STATE_ORDERED);
		totalMap.put(DatabaseConstants.PAYMENT_MODE, mode);

		totalMap.put(DatabaseConstants.REG_TOKEN, Base64.encodeToString(operator.getTOKEN().getBytes(StandardCharsets.UTF_8),
				Base64.NO_PADDING)); //highlight encoded

		totalMap.put(DatabaseConstants.TOTAL_PRICE, AMT_TOTAL);
		totalMap.put(DatabaseConstants.ORDER_PHONE_NUMBER, FirebaseAuth.getInstance().getCurrentUser().getPhoneNumber());

		totalMap.put(DatabaseConstants.ADMIN_TOKEN, Base64.encodeToString(operator.getAdminTOKEN().getBytes(StandardCharsets.UTF_8),
				Base64.NO_PADDING));//highlight encoded

		totalMap.put(DatabaseConstants.ORDER_NUMBER, order_number);

		System.out.println(totalMap);

		order_ref.collection(DatabaseConstants.ORDER_DATA_ACCESS_STRING)
				.document(String.valueOf(order_number))
				.set(totalMap, SetOptions.merge())
				.addOnSuccessListener(_void -> {
					listener.onOrderPlaced();
					Sync.sendMessage(context,
							LocalDatabase.getInstance(context).getAdminTOKEN(),
							"New Order", "Click to open and confirm!", null,
							String.valueOf(totalMap));
				})
				.addOnFailureListener(listener::onOrderPlaceFailed);
	}

	private static Map<String, Object> makeMap() {
		int amount_total = 0;
		Map<String, Object> map = new HashMap<>();
		for (LocalOrders order : LocalOrderSystem.getOrders()) {
			map.put(order.getFood_name() + " (" + order.getStore_name() + ")", order.getFood_count());
			amount_total += order.getFood_count() * order.getFood_price();
		}
		AMT_TOTAL = amount_total;
		return map;
	}

	/* private static void countTotalOrders(OrderCountListener listener) {
		FirebaseFirestore db = DatabaseConstants.getFDB();
		DocumentReference reference = db.collection(DatabaseConstants.MAIN_ORDERS)
				.document(FirebaseAuth.getInstance().getCurrentUser().getUid());

		reference.get().addOnSuccessListener(documentSnapshot -> {
			Handler handler = new Handler();
			handler.post(new Runnable() {
				@Override
				public void run() {
					documentSnapshot.getReference().collection(String.valueOf(total_orders))
							.get().addOnSuccessListener(qDS -> {
						if (qDS.getDocuments().size() == 0) {
							listener.onOrderCounted(total_orders);
						} else {
							total_orders += 1;
							handler.post(this);
						}
					});
				}
			});
		});
	}*/

	private static boolean verifyOrders() {
		return true;
	}

	public static void removeOrder(long time, OrderRemovedListener listener) {
		taskExecutor.execute(() -> remOrder(time, listener));
	}

	private static void remOrder(long time_based_id, OrderRemovedListener listener) {
		FirebaseFirestore db = DatabaseConstants.getFDB();
		DocumentReference reference = db.collection(DatabaseConstants.MAIN_ORDERS)
				.document(FirebaseAuth.getInstance().getCurrentUser().getUid());

		reference.collection(DatabaseConstants.ORDER_DATA_ACCESS_STRING)
				.document(String.valueOf(time_based_id))
				.delete()
				.addOnSuccessListener(_void -> listener.onOrderRemoved())
				.addOnFailureListener(e -> listener.onOrderRemoveFailed());
	}

	public interface OrderPlacingListener {
		void onOrderPlaced();

		void onOrderPlaceFailed(Exception e);
	}

	public interface OrderRemovedListener {
		void onOrderRemoved();

		void onOrderRemoveFailed();
	}
}

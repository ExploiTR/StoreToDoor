package app.exploitr.storetodoor.ui.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.fragment.app.Fragment;

import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;

import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.majors.Soundex;

public class SearchFragment extends Fragment {

	public static String search_text = "Biryani";
	public static boolean launchStandAlone = true;
	private SearchView searchView;

	private TextView search_food_text;
	private ProgressBar progressBar;
/*	private FloatingActionButton exit_search;
	private RecyclerView search_result_recycler;*/

	private String mainCat, subCat;

	public SearchFragment() {
		// Required empty public constructor
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
	//	searchView = getActivity().findViewById(R.id.search_food);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.fragment_search, container, false);

		search_food_text = root.findViewById(R.id.search_food_text);
		progressBar = root.findViewById(R.id.progressBar);
		/*exit_search = root.findViewById(R.id.exit_search);
		search_result_recycler = root.findViewById(R.id.search_result_recycler);*/

		if (launchStandAlone) {
			searchView.setVisibility(View.VISIBLE);
			searchView.requestFocus();
			searchView.setIconified(false);
			getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
		} else {
			getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
			doSearchOffline(search_text);
		}

		searchView.setOnCloseListener(() -> {
			if (isVisible()) {
				getParentFragmentManager().popBackStack();
			}
			searchView.setVisibility(View.GONE);
			searchView.setIconified(false);
			return true;
		});

		processSearch();

		return root;
	}

	private void processSearch() {
		searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				doSearchOffline(query);
				return false;
			}

			@Override
			public boolean onQueryTextChange(String newText) {
				doSearchOffline(newText);
				return false;
			}
		});
	}

	private void indicateSearch(boolean status) {
		search_food_text.setVisibility(status ? View.INVISIBLE : View.VISIBLE);
		progressBar.setVisibility(status ? View.VISIBLE : View.INVISIBLE);
	}

	private void doSearchOffline(String query_text) {
		indicateSearch(true);
		boolean match = false;
		for (String any : query_text.split(" ")) {
			for (int any_food : DatabaseConstants.FOOD_ALL) {
				if (DatabaseConstants.getSoundexID(any_food).equals(Soundex.getCode(any))) {
					//todo set mainCat subCat
					Toast.makeText(getContext(), DatabaseConstants.getFoodName(any_food) + " >>" + Soundex.getCode(any), Toast.LENGTH_SHORT).show();
					match = true;
					break;
				}
			}
		}
		if (!match)
			doOnlineSearchMain(query_text);
	}

	private void doOnlineSearchMain(String query_text) {

		DocumentReference main = DatabaseConstants.getFDB()
				.collection(DatabaseConstants.MAIN_FOODS)
				.document(DatabaseConstants.FOODS_MAIN);

		main.get().addOnSuccessListener(documentSnapshot -> {
			for (String key : documentSnapshot.getData().keySet()) {
				main.collection(key).get().addOnSuccessListener(qDS -> {
					boolean match = false;
					for (DocumentSnapshot snapshot : qDS.getDocuments()) {
						for (String any : snapshot.getId().split(" ")) {
							for (String any_query : query_text.split(" ")) {
								if (DatabaseConstants.getSoundexID(any_query).equals(Soundex.getCode(any))) {
									//todo set mainCat subCat
									match = true;
									break;
								}
							}
						}
					}
					if (!match)
						doOnlineSearchOthers(query_text);
				}).addOnFailureListener(e -> Toast.makeText(getContext(), "Search Error", Toast.LENGTH_SHORT).show());
			}
		}).addOnFailureListener(e -> Toast.makeText(getContext(), "Search Error", Toast.LENGTH_SHORT).show());
	}

	private void doOnlineSearchOthers(String query_text) {
		DocumentReference others = DatabaseConstants.getFDB()
				.collection(DatabaseConstants.MAIN_FOODS)
				.document(DatabaseConstants.FOODS_OTHERS);

		others.get().addOnSuccessListener(documentSnapshot -> {
			for (String key : documentSnapshot.getData().keySet()) {
				others.collection(key).get().addOnSuccessListener(qDS -> {

					for (DocumentSnapshot snapshot : qDS.getDocuments()) {
						for (String any : snapshot.getId().split(" ")) {
							for (String any_query : query_text.split(" ")) {
								if (DatabaseConstants.getSoundexID(any_query).equals(Soundex.getCode(any))) {
									//todo set mainCat subCat
									break;
								}
							}
						}
					}

				}).addOnFailureListener(e -> Toast.makeText(getContext(), "Search Error", Toast.LENGTH_SHORT).show());
			}
		}).addOnFailureListener(e -> Toast.makeText(getContext(), "Search Error", Toast.LENGTH_SHORT).show());
	}
}
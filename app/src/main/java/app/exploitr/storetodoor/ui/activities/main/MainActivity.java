package app.exploitr.storetodoor.ui.activities.main;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;
import androidx.core.content.res.ResourcesCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import com.amulyakhare.textdrawable.TextDrawable;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import java.util.Set;

import app.exploitr.storetodoor.BuildConfig;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;
import app.exploitr.storetodoor.functions.order_system.LocalOrderSystem;
import app.exploitr.storetodoor.ui.activities.others.CartActivity;

public class MainActivity extends AppCompatActivity {

	private AppBarConfiguration mAppBarConfiguration;
	private NavController navController;
	private AlertDialog askForAll;
//	private SearchView searchView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);

		versionAndMaintenanceCheck();

		ExtendedFloatingActionButton fab = findViewById(R.id.fab);
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		NavigationView navigationView = findViewById(R.id.nav_view);
		//	searchView = findViewById(R.id.search_food);

		mAppBarConfiguration = new AppBarConfiguration.Builder(
				R.id.nav_home, R.id.nav_profile, R.id.nav_orders, R.id.nav_search, R.id.nav_share)
				.setOpenableLayout(drawer)
				.build();

		NavHostFragment fragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment);
		if (fragment != null) {
			navController = fragment.getNavController();
		} else {
			recreate();
			return;
		}
		navController.setGraph(R.navigation.mobile_navigation);
		NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
		NavigationUI.setupWithNavController(navigationView, navController);

		fab.setOnClickListener(view -> {
		/*	Snackbar.make(view, "Calling support!", Snackbar.LENGTH_LONG).show();
			startActivity(new Intent(Intent.ACTION_CALL)
					.setData(Uri.parse("tel:" + DatabaseConstants.CALL_SUPPORT)));*/
		/*	searchView.setVisibility(View.VISIBLE);
			searchView.requestFocus();
			searchView.setIconified(false);
			getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);*/
		});

	/*	searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				SearchFragment.search_text = query;
				SearchFragment.launchStandAlone = false;
				navController.navigate(R.id.nav_search);
				return false;
			}

			@Override
			public boolean onQueryTextChange(String newText) {
				searchView.setQuery(newText, true);
				return false;
			}
		});

		searchView.setOnCloseListener(() -> {
			searchView.setVisibility(View.GONE);
			searchView.setIconified(false);
			getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
			return true;
		});*/

		navigationView.post(() -> {
			FirebaseUser user;
			if ((user = FirebaseAuth.getInstance().getCurrentUser()) == null)
				return;

			Set<String> uid_s;
			if ((uid_s = LocalDatabase.getInstance(getBaseContext()).getAdminUidS()) == null)
				return;

			for (String any_uid : uid_s.toArray(new String[0])) {
				if (any_uid.equalsIgnoreCase(user.getUid())) {
					navigationView.getMenu().findItem(R.id.nav_management).setVisible(true); //user == admin?
					break;
				}
			}
		});

		FirebaseAuth.getInstance().addAuthStateListener(firebaseAuth -> {
			FirebaseUser user;
			if ((user = firebaseAuth.getCurrentUser()) == null)
				return;

			Set<String> uid_s;
			if ((uid_s = LocalDatabase.getInstance(getBaseContext()).getAdminUidS()) == null)
				return;

			for (String any_uid : uid_s.toArray(new String[0])) {
				if (any_uid.equalsIgnoreCase(user.getUid())) {
					navigationView.getMenu().findItem(R.id.nav_management).setVisible(true); //user == admin?
					break;
				}
			}

			navigationView.post(() -> {
				ImageView profile_photo = navigationView.findViewById(R.id.profile_photo);
				TextView profile_name = navigationView.findViewById(R.id.profile_name);
				TextView profile_phone = navigationView.findViewById(R.id.profile_phone);

				String name = user.getDisplayName();
				String phone = user.getPhoneNumber();

				if (name != null && !name.equals("")) {
					profile_name.setText(name);
				}

				if (phone != null && !phone.equals("")) {
					profile_phone.setText(phone);
				}

				TextDrawable drawable = TextDrawable.builder()
						.beginConfig()
						.width(500)
						.height(500)
						.useFont(ResourcesCompat.getFont(MainActivity.this, R.font.bangers))
						.fontSize(300)
						.textColor(ContextCompat.getColor(MainActivity.this, R.color.primary))
						.endConfig()
						.buildRound(TextUtils.isEmpty(user.getDisplayName()) ? "?" :
										String.valueOf(user.getDisplayName().charAt(0)),
								ContextCompat.getColor(MainActivity.this, R.color.buttons));

				profile_photo.setImageDrawable(drawable);
			});

			if (LocalDatabase.getInstance(this).getLastAddress() == null) {
				navController.navigate(R.id.nav_profile);//switch
			}
		});
	}

	private void versionAndMaintenanceCheck() {
		DatabaseConstants.getFDB()
				.collection(DatabaseConstants.CONFIG)
				.document(DatabaseConstants.GENERAL)
				.get()
				.addOnSuccessListener(documentSnapshot -> {
					boolean maintenance = (boolean) documentSnapshot.get(DatabaseConstants.MAINTENANCE);
					long version = (long) documentSnapshot.get(DatabaseConstants.CUR_VERSION);
					showDialogue(maintenance, version > BuildConfig.VERSION_CODE);
				});
	}

	private void showDialogue(boolean maintenance, boolean version) {
		askForAll = new AlertDialog.Builder(MainActivity.this)
				.setTitle("Update!")
				.setMessage(maintenance ? "We have a ongoing server maintenance,we'll be back soon!" :
						(version ? "There is an update available in Google Play!" : ""))
				.setCancelable(false)
				.setPositiveButton("Ok", (dialog, which) -> {
							if (maintenance) {
								finishAndRemoveTask();
							} else if (version) {
								LocalOrderSystem.removeOrdersAll(new LocalOrderSystem.LocalOrderSystemListener() {
									@Override
									public void onSuccess() {

									}

									@Override
									public void onFailure() {
										Toast.makeText(MainActivity.this, "Uninstall and update", Toast.LENGTH_SHORT).show();
									}
								});
								finishAndRemoveTask();
								startActivity(new Intent(Intent.ACTION_VIEW,
										Uri.parse("market://details?id=" + BuildConfig.APPLICATION_ID)));
							}
						}
				).create();

		if (!this.isFinishing() && (maintenance || version) && !BuildConfig.DEBUG)
			askForAll.show();
	}

	@Override
	protected void onResume() {
		//takeover search view from fragment
	/*	if (searchView != null) {
			searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
				@Override
				public boolean onQueryTextSubmit(String query) {
					SearchFragment.search_text = query;
					SearchFragment.launchStandAlone = false;
					navController.navigate(R.id.nav_search);
					return false;
				}

				@Override
				public boolean onQueryTextChange(String newText) {
					return false;
				}
			});

			searchView.setOnCloseListener(() -> {
				searchView.setVisibility(View.GONE);
				searchView.setIconified(false);
				getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
				return true;
			});
		}*/
		super.onResume();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(@NonNull MenuItem item) {
		if (item.getItemId() == R.id.action_cart)
			startActivity(new Intent(this, CartActivity.class));
		if (item.getItemId() == R.id.nav_share) {
			Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
			sharingIntent.setType("text/plain");
			String shareBodyText = "I've been ordering food from StoreToDoor for a long time, " +
					"they deliver delicious foods straight to your home! Download the app :" +
					" https://play.google.com/store/apps/details?id=app.exploitr.storetodoor";
			sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, "Share this app with your friends!");
			sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBodyText);
			startActivity(Intent.createChooser(sharingIntent, "Shearing Option"));
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onPause() {
		if (askForAll != null && askForAll.isShowing())
			askForAll.dismiss();
		super.onPause();
	}

	@Override
	public boolean onSupportNavigateUp() {
		return NavigationUI.navigateUp(navController, mAppBarConfiguration)
				|| super.onSupportNavigateUp();
	}
}
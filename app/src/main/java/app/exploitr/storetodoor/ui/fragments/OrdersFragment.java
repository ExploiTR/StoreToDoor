package app.exploitr.storetodoor.ui.fragments;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.util.Base64;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.common.base.Splitter;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;

import org.jetbrains.annotations.NotNull;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Map;

import app.exploitr.storetodoor.Objects.OrderObject;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.adapters.others.PlacedOrderAdapter;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.order_system.FoodOrderManager;

public class OrdersFragment extends Fragment {

	RecyclerView mainOrders;
	RelativeLayout no_orders_text;
	PlacedOrderAdapter placedOrderAdapter;
	ArrayList<OrderObject> orders;
	private long total_orders = 0L;

	@SuppressLint("NotifyDataSetChanged")
	public View onCreateView(@NonNull LayoutInflater inflater,
							 ViewGroup container, Bundle savedInstanceState) {

		((AppCompatActivity) getActivity()).getSupportActionBar().setTitle("My Orders");
		((AppCompatActivity) getActivity()).getSupportActionBar()
				.setSubtitle(null); //must reset

		View root = inflater.inflate(R.layout.fragment_orders, container, false);

		mainOrders = root.findViewById(R.id.mainOrders);
		no_orders_text = root.findViewById(R.id.no_orders_found_text);

		FirebaseFirestore db = DatabaseConstants.getFDB();
		DocumentReference reference = db.collection(DatabaseConstants.MAIN_ORDERS)
				.document(FirebaseAuth.getInstance().getCurrentUser().getUid());

		orders = new ArrayList<>();
		reference.get().addOnSuccessListener(documentSnapshot ->
				documentSnapshot.getReference().collection(DatabaseConstants.ORDER_DATA_ACCESS_STRING)
						.get().addOnSuccessListener(qDS -> {
					if (qDS.getDocuments().size() != 0) {
						no_orders_text.setVisibility(View.INVISIBLE);
						for (DocumentSnapshot snapshot : qDS.getDocuments()) {
							DocumentReference refer_foods = snapshot.getReference();
							OrderObject order = new OrderObject();
							ArrayList<OrderObject.ItemOrder> items = new ArrayList<>();
							order.setTime(Long.parseLong(refer_foods.getId()));
							refer_foods.get().addOnSuccessListener(document -> {
								if (document.exists()) {
									Map<String, Object> map = document.getData();
									if (map != null) {
										for (Map.Entry<String, Object> entry : map.entrySet()) {
											if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_ADDRESS)) {
												order.setAddress((String) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_STATE)) {
												order.setOrder_state((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.DELIVERY_CHARGE)) {
												order.setDelivery_charge((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.PAYMENT_MODE)) {
												order.setPayment_mode((Long) entry.getValue());
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_PHONE_NUMBER)) {
												order.setPhone_number(String.valueOf(entry.getValue()));
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.TOTAL_PRICE)) {
												order.setTotal_price((Long) entry.getValue());
												total_orders += (Long) entry.getValue(); //todo
											} else if (entry.getKey().equalsIgnoreCase(DatabaseConstants.ORDER_DATA)) {
												String food = new String(Base64.decode(String.valueOf(entry.getValue()), Base64.NO_PADDING),
														StandardCharsets.UTF_8);
												food = food.replace("{", "").replace("}", "");
												Map<String, String> map_foods = Splitter.on(',')
														.withKeyValueSeparator('=')
														.split(food);
												for (Map.Entry<String, String> entry_new : map_foods.entrySet()) {
													items.add(new OrderObject.ItemOrder(entry_new.getKey(), Long.parseLong(entry_new.getValue())));
												}
											} else {
												System.out.println(entry.getKey() + " : " + entry.getValue());
											}
										}
									}
									order.setFoods(items);
								}
								orders.add(order);
								if (placedOrderAdapter != null)
									placedOrderAdapter.notifyDataSetChanged();
							});
						}
					} else {
						no_orders_text.setVisibility(View.VISIBLE);
					}
				}));

		placedOrderAdapter = new PlacedOrderAdapter(orders, getActivity(), position -> {
			/*
			 * highlight https://mvnrepository.com/artifact/com.itextpdf/itextg/5.5.10
			 * highlight https://github.com/kariot/PDFInvoice/blob/work/app/build.gradle
			 * todo work on it
			 * */
		});

		mainOrders.setAdapter(placedOrderAdapter);
		mainOrders.setLayoutManager(new LinearLayoutManager(getActivity()));
		placedOrderAdapter.notifyDataSetChanged();

		ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleItemTouchCallback);
		itemTouchHelper.attachToRecyclerView(mainOrders);

		return root;
	}

	ItemTouchHelper.SimpleCallback simpleItemTouchCallback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.END) {
		@Override
		public boolean onMove(@NotNull RecyclerView recyclerView, @NotNull RecyclerView.ViewHolder viewHolder, @NotNull RecyclerView.ViewHolder target) {
			return false;
		}

		@Override
		public void onSwiped(RecyclerView.ViewHolder viewHolder, int swipeDir) {
			OrderObject order = orders.get(viewHolder.getAdapterPosition());
			if (order.getOrder_state() == DatabaseConstants.ORDER_STATE_ORDERED ||
					order.getOrder_state() == DatabaseConstants.ORDER_STATE_POSTPONED ||
					order.getOrder_state() == DatabaseConstants.ORDER_STATE_REJECTED) {
				orders.remove(viewHolder.getAdapterPosition());
				FoodOrderManager.removeOrder(order.getTime(), new FoodOrderManager.OrderRemovedListener() {
					@Override
					public void onOrderRemoved() {
						orders.remove(viewHolder.getAdapterPosition());
						placedOrderAdapter.notifyItemRemoved(viewHolder.getAdapterPosition());
						Toast.makeText(getActivity(), "Order Removed", Toast.LENGTH_SHORT).show();
					}

					@Override
					public void onOrderRemoveFailed() {
						Toast.makeText(getActivity(), "Order Removal Failed, Contact Support", Toast.LENGTH_SHORT).show();
					}
				});
			} else {
				placedOrderAdapter.notifyItemChanged(viewHolder.getAdapterPosition());
				Toast.makeText(getActivity(), "Can't remove successfully placed orders.", Toast.LENGTH_SHORT).show();
			}
		}
	};
}
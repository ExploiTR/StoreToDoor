package app.exploitr.storetodoor.ui.fragments;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.card.MaterialCardView;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import app.exploitr.storetodoor.Objects.ImageText;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.adapters.home.InitialFoodsAdapter;
import app.exploitr.storetodoor.adapters.home.OfferAdapter;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import app.exploitr.storetodoor.functions.majors.LocalDatabase;
import app.exploitr.storetodoor.functions.minors.StoreToDoor;
import app.exploitr.storetodoor.ui.activities.others.FoodListActivity;
import ru.tinkoff.scrollingpagerindicator.ScrollingPagerIndicator;

public class HomeFragment extends Fragment {

	private RecyclerView initialOffers;
	ProgressBar offer_loading;

	ArrayList<Uri> offers = new ArrayList<>();
	OfferAdapter offerAdapter;

	Timer timer;
	int position = 0;
	boolean end;

	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.fragment_home, container, false);

		RecyclerView initialFoods = root.findViewById(R.id.initialFoods);
		initialOffers = root.findViewById(R.id.initialOffers);
		offer_loading = root.findViewById(R.id.offer_loading);
		RecyclerView categoryFoods = root.findViewById(R.id.categoryFoods);
		MaterialCardView special_combos = root.findViewById(R.id.special_combos);

		ArrayList<ImageText> allFoods = new ArrayList<>();

		allFoods.add(new ImageText(R.drawable.biryani, "Biryani"));
		allFoods.add(new ImageText(R.drawable.chow, "Chow"));
		allFoods.add(new ImageText(R.drawable.snack, "Snack"));
		allFoods.add(new ImageText(R.drawable.rolls, "Rolls"));
		allFoods.add(new ImageText(R.drawable.rice, "Rice"));
		allFoods.add(new ImageText(R.drawable.meat_fish, "Chicken/Fish"));
		allFoods.add(new ImageText(R.drawable.paneer, "Paneer"));
		allFoods.add(new ImageText(R.drawable.mutton, "Mutton"));
		allFoods.add(new ImageText(R.drawable.lunch, "Lunch"));
		allFoods.add(new ImageText(R.drawable.dinner, "Dinner"));

		InitialFoodsAdapter adapter = new InitialFoodsAdapter(allFoods, this::launchFoods);
		initialFoods.setLayoutManager(new GridLayoutManager(getActivity(), 2));
		initialFoods.setAdapter(adapter);
		initialFoods.setNestedScrollingEnabled(false);
		adapter.notifyDataSetChanged();

		ArrayList<ImageText> allCats = new ArrayList<>();

		allCats.add(new ImageText(R.drawable.chocolate, "Choco\nlate")); //todo
		allCats.add(new ImageText(R.drawable.drinks, "Drinks"));


		InitialFoodsAdapter adapter_cat = new InitialFoodsAdapter(allCats, select -> launchFoods(select + 11));
		categoryFoods.setLayoutManager(new GridLayoutManager(getActivity(), 2));
		categoryFoods.setAdapter(adapter_cat);
		categoryFoods.setNestedScrollingEnabled(false);
		adapter_cat.notifyDataSetChanged();

		special_combos.setOnClickListener(v -> launchFoods(10));

		String address;
		if ((address = LocalDatabase.getInstance(getContext()).getLastAddress()) != null) {
			((AppCompatActivity) getActivity()).getSupportActionBar().setTitle("Welcome!");
			((AppCompatActivity) getActivity()).getSupportActionBar()
					.setSubtitle(address);
		}
		showOffers(root);
		return root;
	}

	private void showOffers(View root) {
		DatabaseConstants.getFDS()
				.getReference()
				.child("/offers/")
				.listAll()
				.addOnSuccessListener(listResult -> {
					for (StorageReference reference : listResult.getItems()) {
						reference.getDownloadUrl().addOnSuccessListener(uri -> {
							if (!offers.contains(uri)) {
								offers.add(uri);
								if (offerAdapter != null)
									offerAdapter.notifyDataSetChanged();
							}
							if (offer_loading.isShown())
								offer_loading.setVisibility(View.GONE);
						}).addOnFailureListener(e -> {
							if (StoreToDoor.usableContext == null || StoreToDoor.usableContext.get() == null)
								return;
							Toast.makeText(StoreToDoor.usableContext.get(),
									"Can't load images, network problem or server problem!",
									Toast.LENGTH_SHORT).show();
						});
					}
				}).addOnFailureListener(e -> {
			if (StoreToDoor.usableContext == null || StoreToDoor.usableContext.get() == null)
				return;
			Toast.makeText(StoreToDoor.usableContext.get(),
					"Can't load images, network problem or server problem!",
					Toast.LENGTH_SHORT).show();
		});

		offerAdapter = new OfferAdapter(offers);
		initialOffers.setAdapter(offerAdapter);

		initialOffers.setLayoutManager(new LinearLayoutManager(getActivity(), RecyclerView.HORIZONTAL, false));
		ScrollingPagerIndicator recyclerIndicator = root.findViewById(R.id.indicator);
		recyclerIndicator.attachToRecyclerView(initialOffers);

		timer = new Timer();
		timer.scheduleAtFixedRate(new AutoScrollTask(), 0, 4000);
	}

	@Override
	public void onResume() {
		if (timer != null) { //let run from onCreate first
			timer.cancel();
			timer = new Timer();
			timer.scheduleAtFixedRate(new AutoScrollTask(), 0, 4000);
		}
		super.onResume();
	}

	@Override
	public void onPause() {
		if (timer != null)
			timer.cancel();
		super.onPause();
	}

	private void launchFoods(int select) {
		startActivity(new Intent(getActivity(), FoodListActivity.class).putExtra(FoodListActivity.FOOD_NAME_DESC, select));
	}

	private class AutoScrollTask extends TimerTask {
		public void run() {
			initialOffers.post(() -> {
				if (position == offers.size() - 1) {
					end = true;
				} else if (position == 0) {
					end = false;
				}
				if (!end) {
					position++;
				} else {
					position--;
				}
				initialOffers.smoothScrollToPosition(position < offers.size() ? position : 0);
			});
		}
	}
}
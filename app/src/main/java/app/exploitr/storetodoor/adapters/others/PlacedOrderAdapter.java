package app.exploitr.storetodoor.adapters.others;

import android.util.Base64;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.button.MaterialButton;
import com.ms.square.android.expandabletextview.ExpandableTextView;

import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

import app.exploitr.storetodoor.Objects.OrderObject;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;

public class PlacedOrderAdapter extends RecyclerView.Adapter<PlacedOrderAdapter.PlacedOrderHolder> {

	ArrayList<OrderObject> mData;
	FragmentActivity appCompatActivity;
	OrderReceiptListener listener;
	Calendar calendar;

	public PlacedOrderAdapter(ArrayList<OrderObject> data, FragmentActivity context, OrderReceiptListener changeListener) {
		mData = data;
		appCompatActivity = context;
		listener = changeListener;
		calendar = Calendar.getInstance();
	}

	@NonNull
	@Override
	public PlacedOrderHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
		return new PlacedOrderHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_placed_orders_list, parent, false));
	}

	@Override
	public void onBindViewHolder(@NonNull PlacedOrderHolder holder, int position) {
		holder.get_receipt.setOnClickListener(v -> listener.onClick(position));

		holder.order_index_text.setText(new StringBuilder("Order #" + mData.get(position).getTime()));

		for (OrderObject.ItemOrder order : mData.get(position).getFoods()) {
			holder.orderDesc.setText(holder.orderDesc.getText() + "• " + order.item + " x " + order.count + "\n");
		}

		holder.total_price.setText(new StringBuilder("₹ " + mData.get(position).getTotal_price()));

		boolean null_ = mData.get(position).getAddress() == null || mData.get(position).getAddress().equals("null");
		holder.order_address_text.setText(new StringBuilder("Delivery Address - " + (
				null_ ? "No Address Provided?" : new String(Base64.decode(mData.get(position).getAddress(),
						Base64.NO_PADDING), StandardCharsets.UTF_8))));

		calendar.setTimeInMillis(mData.get(position).getTime());
		SimpleDateFormat format = new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss", Locale.getDefault());
		format.setCalendar(calendar);
		holder.order_time_text.setText(new StringBuilder("Ordered on " + format.format(calendar.getTime())));

		switch ((int) mData.get(position).getOrder_state()) {
			case DatabaseConstants.ORDER_STATE_ORDERED: {
				holder.order_status.setIconResource(R.drawable.ic_status_ordered);
				holder.order_status.setIconTintResource(R.color.order_ordered);
				holder.order_status.setTextColor(ContextCompat.getColor(appCompatActivity, R.color.order_ordered));
				holder.order_status.setText(R.string.ordered_state);
				break;
			}
			case DatabaseConstants.ORDER_STATE_ACCEPTED: {
				holder.order_status.setIconResource(R.drawable.ic_status_accepted);
				holder.order_status.setIconTintResource(R.color.order_accepted);
				holder.order_status.setTextColor(ContextCompat.getColor(appCompatActivity, R.color.order_accepted));
				holder.order_status.setText(R.string.accepted_state);
				break;
			}
			case DatabaseConstants.ORDER_STATE_POSTPONED: {
				holder.order_status.setIconResource(R.drawable.ic_status_postponed);
				holder.order_status.setIconTintResource(R.color.order_postponed);
				holder.order_status.setTextColor(ContextCompat.getColor(appCompatActivity, R.color.order_postponed));
				holder.order_status.setText(R.string.postponed_state);
				break;
			}
			case DatabaseConstants.ORDER_STATE_REJECTED: {
				holder.order_status.setIconResource(R.drawable.ic_status_rejected);
				holder.order_status.setIconTintResource(R.color.order_rejected);
				holder.order_status.setTextColor(ContextCompat.getColor(appCompatActivity, R.color.order_rejected));
				holder.order_status.setText(R.string.rejected_state);
				break;
			}
			case DatabaseConstants.ORDER_STATE_DELIVERED: {
				holder.order_status.setIconResource(R.drawable.ic_status_delivered);
				holder.order_status.setIconTintResource(R.color.order_delivered);
				holder.order_status.setTextColor(ContextCompat.getColor(appCompatActivity, R.color.order_delivered));
				holder.order_status.setText(R.string.delivered_state);
				break;
			}
			default:
		}
	}

	@Override
	public int getItemCount() {
		return mData.size();
	}

	static class PlacedOrderHolder extends RecyclerView.ViewHolder {
		TextView order_index_text, order_time_text, total_price, order_address_text;
		ExpandableTextView orderDesc;
		MaterialButton get_receipt, order_status;

		public PlacedOrderHolder(@NonNull View itemView) {
			super(itemView);
			order_index_text = itemView.findViewById(R.id.order_index_text);
			orderDesc = itemView.findViewById(R.id.orderDesc);
			order_time_text = itemView.findViewById(R.id.order_time_text);
			total_price = itemView.findViewById(R.id.total_price);
			order_address_text = itemView.findViewById(R.id.order_address_text);

			get_receipt = itemView.findViewById(R.id.get_receipt);
			order_status = itemView.findViewById(R.id.order_status);
		}
	}

	public interface OrderReceiptListener {
		void onClick(int position);
	}
}



package app.exploitr.storetodoor.adapters.others;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.radiobutton.MaterialRadioButton;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;

import app.exploitr.storetodoor.Objects.FoodObject;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.majors.DatabaseConstants;
import me.himanshusoni.quantityview.QuantityView;

public class MainFoodsAdapter extends RecyclerView.Adapter<MainFoodsAdapter.MainFoodsModelHolder> {

	ArrayList<FoodObject> mData;
	AppCompatActivity context;
	MainFoodsClickListener listener;
	long start_time;
	long end_time;

	String main_food_type, sub_food_type;

	public MainFoodsAdapter(ArrayList<FoodObject> data, long start, long end,
							AppCompatActivity activity, String mainFoodType,
							String subFoodType,
							MainFoodsClickListener clickListener) {
		mData = data;
		context = activity;
		listener = clickListener;

		main_food_type = mainFoodType;
		sub_food_type = subFoodType;

		start_time = start;
		end_time = end;
	}

	@NonNull
	@Override
	public MainFoodsModelHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
		return new MainFoodsModelHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_food_list_items, parent, false));
	}

	@Override
	public void onBindViewHolder(@NonNull MainFoodsModelHolder holder, int position) {
		FoodObject local_data = mData.get(position);

		holder.foodName.setText(local_data.getMajorFood());
		holder.foodDesc.setText(local_data.getFoodDesc());
		ArrayList<FoodObject.StorePrice> prices = local_data.getPrices();
		holder.storeList.removeAllViews(); //fix for duplication
		for (int i = 0; i < prices.size(); i++) {
			MaterialRadioButton button = new MaterialRadioButton(context);
			button.setText(new StringBuilder()
					.append(prices.get(i).getStore())
					.append(" - ").append("â‚¹")
					.append(prices.get(i).getPrice()));
			LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
					LinearLayout.LayoutParams.WRAP_CONTENT,
					LinearLayout.LayoutParams.WRAP_CONTENT, 0.1f);
			button.setLayoutParams(params);
			holder.storeList.addView(button);

			if (i == 0)
				button.setChecked(true);
		}
		if (local_data.getMinOrder() != 0L) {
			holder.quantity.setMinQuantity((int) local_data.getMinOrder());
			holder.quantity.setQuantity((int) local_data.getMinOrder());
		} else {
			holder.quantity.setMinQuantity(1);
			holder.quantity.setQuantity(1);
		}
		holder.quantity.setMaxQuantity(1000);

		holder.add_item.setOnClickListener(v -> {
			if (holder.storeList.getCheckedRadioButtonId() == -1) {
				Toast.makeText(context, "Please Select Store First!", Toast.LENGTH_SHORT).show();
				return;
			}
			listener.onClick(position,
					local_data.getItem_id(),
					holder.quantity.getQuantity(),
					local_data.getMinOrder(),
					getSelected(holder.storeList),
					local_data.isSingleOrderable());
		});
		if (local_data.isSpecial())
			holder.special_symbol.setVisibility(View.VISIBLE);

		String food = local_data.getMajorFood();
		food = food.contains("(") ? food.split("\\(")[0] : food;
		food = food.replaceAll("\\s", "");

		StorageReference ref = DatabaseConstants.getFDS()
				.getReference()
				.child("/foods/")
				.child("/" + main_food_type + "/")
				.child("/" + sub_food_type + "/")
				.child(food.toLowerCase() + ".jpg");
		ref.getDownloadUrl()
				.addOnSuccessListener(uri -> {
					if (!context.isFinishing()) {
						Glide.with(context)
								.load(uri)
								.into(holder.food_image);
					}
				})
				.addOnFailureListener(e -> {
					e.printStackTrace();
					if (!context.isFinishing()) {
						Glide.with(context)
								.load(R.drawable.image_not_found)
								.into(holder.food_image);
					}
				});

		Glide.with(context)
				.load(R.drawable.load)
				.into(holder.food_image);
	}

	private int getSelected(RadioGroup radioGroup) {
		return radioGroup.indexOfChild(radioGroup.findViewById(radioGroup.getCheckedRadioButtonId()));
	}

	@Override
	public int getItemCount() {
		return mData.size();
	}

	static class MainFoodsModelHolder extends RecyclerView.ViewHolder {
		TextView foodName, foodDesc;
		QuantityView quantity;
		Button add_item;
		RadioGroup storeList;
		TextView special_symbol;
		ShapeableImageView food_image;

		public MainFoodsModelHolder(@NonNull View itemView) {
			super(itemView);
			foodName = itemView.findViewById(R.id.foodName);
			foodDesc = itemView.findViewById(R.id.foodDesc);
			quantity = itemView.findViewById(R.id.quantity);
			add_item = itemView.findViewById(R.id.add_item);
			storeList = itemView.findViewById(R.id.storeList);
			special_symbol = itemView.findViewById(R.id.special_symbol);
			food_image = itemView.findViewById(R.id.food_image);
		}
	}

	public interface MainFoodsClickListener {
		void onClick(int main_select, long item_id, int quantity, long min_order, int store, boolean single);
	}
}

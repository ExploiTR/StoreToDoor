package app.exploitr.storetodoor.adapters.home;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.RecyclerView;

import app.exploitr.storetodoor.Objects.LocalOrders;
import app.exploitr.storetodoor.R;
import app.exploitr.storetodoor.functions.order_system.LocalOrderSystem;
import io.realm.RealmResults;
import me.himanshusoni.quantityview.QuantityView;

public class CartAdapter extends RecyclerView.Adapter<CartAdapter.CartOrderHolder> {

	RealmResults<LocalOrders> mData;
	AppCompatActivity appCompatActivity;
	OrderChangeListener listener;

	public CartAdapter(AppCompatActivity context, OrderChangeListener changeListener) {
		mData = LocalOrderSystem.getOrders();
		appCompatActivity = context;
		listener = changeListener;
	}

	@NonNull
	@Override
	public CartOrderHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
		return new CartOrderHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_cart_list_items, parent, false));
	}

	@Override
	public void onBindViewHolder(@NonNull CartOrderHolder holder, int position_invalid) {
		int position = holder.getAdapterPosition();
		holder.foodName.setText(new StringBuilder(mData.get(position).getFood_name()));
		holder.storeName.setText(new StringBuilder("from : ").append(mData.get(position).getStore_name()));
		holder.price.setText(new StringBuilder("â‚¹").append(mData.get(position).getFood_price()).append(" per item."));

		holder.quantity.setMinQuantity((int) mData.get(position).getMin_orders());
		holder.quantity.setQuantity((int) mData.get(position).getFood_count());

		holder.quantity.setOnQuantityChangeListener(new QuantityView.OnQuantityChangeListener() {
			@Override
			public void onQuantityChanged(int oldQuantity, int newQuantity, boolean programmatically) {
				if (newQuantity < 1) {
					holder.quantity.setQuantity(oldQuantity);
					return;
				}
				LocalOrderSystem.updateOrders(mData.get(position).getItem_id(), newQuantity, new LocalOrderSystem.LocalOrderSystemListener() {
					@Override
					public void onSuccess() {
						listener.onClick(position);
					}

					@Override
					public void onFailure() {
						Toast.makeText(appCompatActivity, "Err, can't change quantity, restart app", Toast.LENGTH_SHORT).show();
					}
				});
			}

			@Override
			public void onLimitReached() {
				Toast.makeText(appCompatActivity, "Item Limited!", Toast.LENGTH_SHORT).show();
			}
		});
		holder.del_item.setOnClickListener(v ->
				LocalOrderSystem.removeOrders(mData.get(position).getItem_id(), new LocalOrderSystem.LocalOrderSystemListener() {
					@Override
					public void onSuccess() {
						notifyItemRemoved(position);
						notifyItemChanged(position);
						listener.onClick(position);
						Toast.makeText(appCompatActivity, "Item removed from cart!", Toast.LENGTH_SHORT).show();
					}

					@Override
					public void onFailure() {
						Toast.makeText(appCompatActivity, "Err, can't change quantity, restart app", Toast.LENGTH_SHORT).show();
					}
				}));
	}

	@Override
	public int getItemCount() {
		return mData.size();
	}

	static class CartOrderHolder extends RecyclerView.ViewHolder {
		TextView foodName, storeName, price;
		Button del_item;
		QuantityView quantity;

		public CartOrderHolder(@NonNull View itemView) {
			super(itemView);
			foodName = itemView.findViewById(R.id.main_foodName);
			storeName = itemView.findViewById(R.id.storeName);
			price = itemView.findViewById(R.id.price);
			del_item = itemView.findViewById(R.id.del_item);
			quantity = itemView.findViewById(R.id.quantity);
		}
	}

	public interface OrderChangeListener {
		void onClick(int position);
	}
}

